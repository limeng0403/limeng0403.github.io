<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://lionney.coding.me/lionney.coding.net/</id>
    <title>大猛的私人空间</title>
    <updated>2019-11-13T06:55:28.991Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://lionney.coding.me/lionney.coding.net/"/>
    <link rel="self" href="http://lionney.coding.me/lionney.coding.net//atom.xml"/>
    <subtitle>他人即地狱</subtitle>
    <logo>http://lionney.coding.me/lionney.coding.net//images/avatar.png</logo>
    <icon>http://lionney.coding.me/lionney.coding.net//favicon.ico</icon>
    <rights>All rights reserved 2019, 大猛的私人空间</rights>
    <entry>
        <title type="html"><![CDATA[14 个拷贝数组的 JS 技巧]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/14-ge-kao-bei-shu-zu-de-js-ji-qiao</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/14-ge-kao-bei-shu-zu-de-js-ji-qiao">
        </link>
        <updated>2019-11-13T06:15:03.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>为了保证的可读性，本文采用意译而非直译。</p>
</blockquote>
<p>数组拷贝经常被误解，但这并不是因为拷贝过程本身，而是因为缺乏对 JS 如何处理数组及其元素的理解。JS 中的数组是可变的，这说明在创建数组之后还可以修改数组的内容。<br>
这意味着要拷贝一个数组，咱们不能简单地将旧数组分配给一个新变量，它也是一个数组。如果这样做，它们将共享相同的引用，并且在更改一个变量之后，另一个变量也将受到更改的影响。这就是我们需要克隆这个数组的原因。<br>
接着来看看一些关于拷贝何克隆数组的有趣方法和技巧。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>为了保证的可读性，本文采用意译而非直译。</p>
</blockquote>
<p>数组拷贝经常被误解，但这并不是因为拷贝过程本身，而是因为缺乏对 JS 如何处理数组及其元素的理解。JS 中的数组是可变的，这说明在创建数组之后还可以修改数组的内容。<br>
这意味着要拷贝一个数组，咱们不能简单地将旧数组分配给一个新变量，它也是一个数组。如果这样做，它们将共享相同的引用，并且在更改一个变量之后，另一个变量也将受到更改的影响。这就是我们需要克隆这个数组的原因。<br>
接着来看看一些关于拷贝何克隆数组的有趣方法和技巧。</p>
<!-- more -->
<h3 id="技巧-1-使用arrayslice方法">技巧 1 - 使用Array.slice方法</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5]

const copy = numbers.slice()
copy.push(6) // 添加新项以证明不会修改原始数组

console.log(copy)
console.log(numbers)

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-2-使用arraymap方法">技巧 2 - 使用Array.map方法</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5]

const copy = numbers.map( num =&gt; num )
copy.push(6) // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-3-使用arrayfrom方法">技巧 3 - 使用Array.from方法</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const copy = Array.from(new Set(numbers));
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-4-使用展开操作符">技巧 4 - 使用展开操作符</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const copy = [...numbers];
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出 
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-5-使用-arrayof-方法和展开操作符">技巧 5 - 使用 Array.of 方法和展开操作符</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const copy = Array.of(...numbers);
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出 
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<p>Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为7的空数组（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）。</p>
<pre><code class="language-javascript">Array.of(7);       // [7] 
Array.of(1, 2, 3); // [1, 2, 3]

Array(7);          // [ , , , , , , ]
Array(1, 2, 3);    // [1, 2, 3]
</code></pre>
<h3 id="技巧-6-使用-array-构造函数和展开操作符">技巧 6 - 使用 Array 构造函数和展开操作符</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const copy = new Array(...numbers);
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出 
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-7-使用解构">技巧 7 - 使用解构</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const [...copy] = numbers;
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-8-使用-arrayconcat-方法">技巧 8 - 使用 Array.concat 方法</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const copy = numbers.concat();
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-9-使用-arraypush-方法和展开操作符">技巧 9 - 使用 Array.push 方法和展开操作符</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

let copy = [];
copy.push(...numbers);
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-10-使用-arrayunshift-方法和展开操作符">技巧 10 - 使用 Array.unshift 方法和展开操作符</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

let copy = [];
copy.unshift(...numbers);
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-11-使用-arrayforeach-方法和展开操作符">技巧 11 - 使用 Array.forEach 方法和展开操作符</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

let copy = [];
numbers.forEach((value) =&gt; copy.push(value));
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-12-使用-for-循环">技巧 12 - 使用 for 循环</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

let copy = [];
for (let i = 0; i &lt; numbers.length; i++) {
    copy.push(numbers[i]);
}
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-13-使用-arrayreduce-方法">技巧 13 - 使用 Array.reduce 方法</h3>
<p>这个做法是可行，但比较多余，少用</p>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];

const copy = numbers.reduce((acc, x) =&gt; { acc.push(x); return acc; }, []);
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="技巧-14-使用古老的-apply-方法">技巧 14 - 使用古老的 apply 方法</h3>
<pre><code class="language-javascript">const numbers = [1, 2, 3, 4, 5];
let copy = [];
Array.prototype.push.apply(copy, numbers);
copy.push(6); // 添加新项以证明不会修改原始数组

console.log(copy);
console.log(numbers);

// 输出
// [1, 2, 3, 4, 5, 6]
// [1, 2, 3, 4, 5]
</code></pre>
<h3 id="总结">总结</h3>
<p>请注意，上面这些方法执行的是浅拷贝，就是数组是元素是对象的时候，咱们更改对象的值，另一个也会跟着变，就能技巧4来说，如果咱们的数组元素是对象，如下所示：</p>
<pre><code class="language-javascript">const authors = [
  { name: '前端小智', age: 25 }, 
  { name: '王大冶', age: 30 }, 
]

const copy = [...authors ]
copy[0].name = '被更改过的前端小智'

console.log(copy)
console.log(authors)
</code></pre>
<p>输出<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1573626015252.jpg" alt=""><br>
所以上面的技巧适合简单的数据结构，复杂的结构要使用深拷贝。数组拷贝经常被误解，但这并不是因为拷贝过程本身，而是因为缺乏对 JS 如何处理数组及其元素的理解。</p>
<p>作者：<a href="https://juejin.im/post/5dcb425f6fb9a04aa20361d8">前端小智</a><br>
来源：掘金<br>
著作权归作者所有。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过 20 个棘手的ES6面试问题来提高咱们的 JS 技能]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/tong-guo-20-ge-ji-shou-de-es6-mian-shi-wen-ti-lai-ti-gao-zan-men-de-js-ji-neng</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/tong-guo-20-ge-ji-shou-de-es6-mian-shi-wen-ti-lai-ti-gao-zan-men-de-js-ji-neng">
        </link>
        <updated>2019-11-12T02:43:53.000Z</updated>
        <summary type="html"><![CDATA[<p>ECMAScript 6（以下简称ES6）是 JS 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JS 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。接下来咱们来看看 20 道棘手的面试题，通过做题，顺带提升一下咱们的 JS 的技能。</p>
]]></summary>
        <content type="html"><![CDATA[<p>ECMAScript 6（以下简称ES6）是 JS 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JS 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。接下来咱们来看看 20 道棘手的面试题，通过做题，顺带提升一下咱们的 JS 的技能。</p>
<!-- more -->
<h3 id="问题1可以解释一下-es5-和es6的区别吗">问题1：可以解释一下 ES5 和ES6的区别吗?</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>ECMAScript 5 (ES5)：ECMAScript 的第五版，于2009年标准化，该标准已在所有现代浏览器中完全支持。<br>
ECMAScript 6 (ES6)/ ECMAScript 2015 (ES2015):ECMAscript 第 6 版，2015 年标准化。这个标准已经在大多数现代浏览器中部分实现。</p>
<p>以下是ES5和ES6之间的一些主要区别：</p>
<h4 id="箭头函数和字符串插值">箭头函数和字符串插值</h4>
<pre><code class="language-javascript">const greetings = (name) =&gt; {
  return `hello ${name}`;
}
</code></pre>
<p>也可以这样写：</p>
<pre><code class="language-javascript">const greetings = name =&gt; `hello ${name}`;    
</code></pre>
<p>const：const 表示无法修改变量的原始值。需要注意的是，const表示对值的常量引用，咱们可以改变被引用的对象的属性值，但不能改变引用本身。</p>
<pre><code class="language-javascript">const NAMES = [];
NAMES.push(&quot;Jim&quot;);
console.log(NAMES.length === 1); // true
NAMES = [&quot;Steve&quot;, &quot;John&quot;]; // error    
</code></pre>
<p><strong>块作用域：ES6 中 let, const 会创建块级作用域，不会像 var 声明变量一样会被提升。</strong><br>
默认参数：默认参数使咱们可以使用默认值初始化函数。当参数省略或 undefined 时使用默认参数值。</p>
<pre><code class="language-javascript">function multiply (a, b = 2) {
   return a * b;
}
multiply(5); // 10    
</code></pre>
<h4 id="类定义与继承">类定义与继承</h4>
<p>ES6 引入了对类(class关键字)、构造函数(constructor关键字)和 extend 关键字(用于继承)的语言支持。</p>
<p><strong>for-of 运算符</strong></p>
<p>for...of 语句创建一个遍历可迭代对象的循环。</p>
<p><strong>展开操作符</strong></p>
<pre><code class="language-javascript">const obj1 = { a: 1, b: 2 }
const obj2 = { a: 2, c: 3, d: 4}
const obj3 = {...obj1, ...obj2}    
</code></pre>
<p><strong>Promises</strong>: Promises 提供了一种机制来处理异步操作的结果和错误。可以使用回调来完成相同的事情，但是Promises 通过方法链接和简洁的错误处理来提高可读性。</p>
<pre><code class="language-javascript">const isGreater = (a, b) =&gt; {
  return new Promise ((resolve, reject) =&gt; {
    if(a &gt; b) {
      resolve(true)
    } else {
      reject(false)
    }
    })
}
isGreater(1, 2)
  .then(result =&gt; {
    console.log('greater')
  })
 .catch(result =&gt; {
    console.log('smaller')
 })    
</code></pre>
<p><strong>模块导出</strong></p>
<pre><code class="language-javascript">const myModule = { x: 1, y: () =&gt; { console.log('This is ES5') }}
export default myModule;   
</code></pre>
<p><strong>和导入</strong></p>
<pre><code class="language-javascript">import myModule from './myModule';
</code></pre>
<h3 id="问题-2什么是-iife-立即调用的函数表达式">问题 2：什么是 IIFE (立即调用的函数表达式)</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>IIFE是一个立即调用的函数表达式，它在创建后立即执行</p>
<pre><code class="language-javascript">(function IIFE(){
    console.log( &quot;Hello!&quot; );
})();
// &quot;Hello!&quot;
</code></pre>
<p>常常使用此模式来避免污染全局命名空间，因为在IIFE中使用的所有变量(与任何其他普通函数一样)在其作用域之外都是不可见的。</p>
<h3 id="问题-3何时在-es6-中使用箭头函数">问题 3：何时在 ES6 中使用箭头函数？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>以下是一些经验分享：</p>
<ul>
<li>在全局作用域内和Object.prototype属性中使用 function 。</li>
<li>为对象构造函数使用 class。</li>
<li>其它情况使用箭头函数。</li>
</ul>
<p>为啥大多数情况都使用箭头函数？</p>
<ul>
<li>作用域安全性:当箭头函数被一致使用时，所有东西都保证使用与根对象相同的thisObject。如果一个标准函数回调与一堆箭头函数混合在一起，那么作用域就有可能变得混乱。</li>
<li>紧凑性:箭头函数更容易读写。</li>
<li>清晰度:使用箭头函数可明确知道当前 this 指向。</li>
</ul>
<h3 id="问题-4将-symbol-引入es6-的目的是什么">问题 4:将 Symbol 引入ES6 的目的是什么？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>Symbol 是一种新的、特殊的对象，可以用作对象中惟一的属性名。使用 Symbol 替换string 可以避免不同的模块属性的冲突。还可以将Symbol设置为私有，以便尚无直接访问Symbol权限的任何人都不能访问它们的属性。<br>
Symbol 是JS新的基本数据类型。与number、string和boolean 原始类型一样，Symbol 也有一个用于创建它们的函数。与其他原始类型不同，Symbol没有字面量语法。创建它们的唯一方法是使用以下方法中的Symbol构造函数</p>
<pre><code class="language-javascript">let symbol = Symbol();    
</code></pre>
<h3 id="问题-5-在-es6-中使用展开spread语法有什么好处-它与剩余rest语法有什么不同">问题 5: 在 ES6 中使用展开(spread)语法有什么好处? 它与剩余(rest)语法有什么不同?</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>ES6 的展开语法在以函数形式进行编码时非常有用，因为咱们可以轻松地创建数组或对象的副本，而无需求助于Object.create，slice或库函数。Redux 和rx.js项目中经常使用此特性。</p>
<pre><code class="language-javascript">function putDookieInAnyArray(arr) {
  return [...arr, 'dookie'];
}

const result = putDookieInAnyArray(['I', 'really', &quot;don't&quot;, 'like']); 
// [&quot;I&quot;, &quot;really&quot;, &quot;don't&quot;, &quot;like&quot;, &quot;dookie&quot;]

const person = {
  name: 'Todd',
  age: 29,
};

const copyOfTodd = { ...person };  
</code></pre>
<p>ES6 的 rest 语法提供了一种捷径，其中包括要传递给函数的任意数量的参数。<br>
就像展开语法的逆过程一样，它将数据放入并填充到数组中而不是展开数组，并且它在函数变量以及数组和对象解构分中也经常用到。</p>
<pre><code class="language-javascript">function addFiveToABunchOfNumbers(...numbers) {
  return numbers.map(x =&gt; x + 5);
}

const result = addFiveToABunchOfNumbers(4, 5, 6, 7, 8, 9, 10); 
// [9, 10, 11, 12, 13, 14, 15]

const [a, b, ...rest] = [1, 2, 3, 4]; // a: 1, b: 2, rest: [3, 4]

const { e, f, ...others } = {
  e: 1,
  f: 2,
  g: 3,
  h: 4,
}; // e: 1, f: 2, others: { g: 3, h: 4 }   
</code></pre>
<h3 id="问题-6-es6-类和-es5-函数构造函数有什么区别">问题 6: ES6 类和 ES5 函数构造函数有什么区别？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<pre><code class="language-javascript">// ES5 Function Constructor
function Person(name) {
  this.name = name;
}

// ES6 Class
class Person {
  constructor(name) {
    this.name = name;
  }
}  
</code></pre>
<p>对于简单的构造函数，它们看起来非常相似。<br>
构造函数的主要区别在于使用继承。如果咱们创建一个继承Person类的Student子类并添加一个studentId字段，以下是两种方式的使用：</p>
<pre><code class="language-javascript">// ES5 Function Constructor
function Student(name, studentID) {
  // 调用你类的构造函数以初始化你类派生的成员。
  Person.call(this. name)
  // 初始化子类的成员。
  this.studentId = studentId
}

Student.prototype = Object.create(Person.prototype)
Student.prototype.constructor = Student

// ES6 Class
class Student extends Person {
  constructor(name, studentId) {
    super(name)
    this.studentId = studentId
  }
}
</code></pre>
<p>在 ES5 中使用继承要复杂得多，而且 ES6 版本更容易理解和记住。</p>
<h3 id="问题-7-call-和-apply-区别是啥">问题 7: .call 和 .apply 区别是啥？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>.call和.apply均用于调用函数，并且第一个参数将用作函数中this的值。但是，.call将逗号分隔的参数作为下一个参数，而.apply将参数数组作为下一个参数。简单记忆法：C用于call和逗号分隔，A用于apply和参数数组。</p>
<pre><code class="language-javascript">function add(a, b) {
  return a + b;
}

console.log(add.call(null, 1, 2)); // 3
console.log(add.apply(null, [1, 2])); // 3   
</code></pre>
<h3 id="问题-8-为什么要使用-es6-类">问题 8: 为什么要使用 ES6 类？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>选择使用类的一些原因：</p>
<p>语法更简单，更不容易出错。</p>
<p>使用新语法比使用旧语法更容易(而且更不易出错)地设置继承层次结构。</p>
<p>class可以避免构造函数中使用new的常见错误（如果构造函数不是有效的对象，则使构造函数抛出异常）。</p>
<p>用新语法调用父原型方法的版本比旧语法要简单得多，用super.method()代替ParentConstructor.prototype.method.call(this) 或Object.getPrototypeOf(Object.getPrototypeOf(this)).method.call(this)</p>
<p>考虑下面代码：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1573528413636.jpg" alt=""></p>
<p>使用 ES6 实现上述功能：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1573528421667.jpg" alt=""></p>
<h3 id="问题-9-在-js-中定义枚举的首选语法是什么">问题 9: 在 JS 中定义枚举的首选语法是什么</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>可以 Object.freeze 来实现枚举</p>
<pre><code class="language-javascript">var DaysEnum = Object.freeze({
    &quot;monday&quot;: 1,
    &quot;tuesday&quot;: 2,
    &quot;wednesday&quot;: 3,
    ...
})
</code></pre>
<p>或者</p>
<pre><code class="language-javascript">var DaysEnum = {
    &quot;monday&quot;: 1,
    &quot;tuesday&quot;: 2,
    &quot;wednesday&quot;: 3,
    ...
}
Object.freeze(DaysEnum)
</code></pre>
<p>但是，这阻止咱们把值分配给变量：</p>
<pre><code class="language-javascript">let day = DaysEnum.tuesday
day = 298832342 // 不会报错
</code></pre>
<h3 id="问题-10-解释一下-objectfreeze-和-const-的区别">问题 10: 解释一下 Object.freeze() 和 const 的区别</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>const和Object.freeze是两个完全不同的概念。<br>
const 声明一个只读的变量，一旦声明，常量的值就不可改变：</p>
<pre><code class="language-javascript">const person = {
    name: &quot;Leonardo&quot;
};
let animal = {
    species: &quot;snake&quot;
};
person = animal; // ERROR &quot;person&quot; is read-only    
</code></pre>
<p>Object.freeze适用于值，更具体地说，适用于对象值，它使对象不可变，即不能更改其属性。</p>
<pre><code class="language-javascript">let person = {
    name: &quot;Leonardo&quot;
};
let animal = {
    species: &quot;snake&quot;
};
Object.freeze(person);
person.name = &quot;Lima&quot;; //TypeError: Cannot assign to read only property 'name' of object
console.log(person); 
</code></pre>
<h3 id="问题-11-js-的提升是什么">问题 11: JS 的提升是什么</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>提升是指 JS 解释器将所有变量和函数声明移动到当前作用域顶部的操作，提升有两种类型</p>
<ul>
<li>变量提升</li>
<li>函数提升</li>
</ul>
<p>只要一个var(或函数声明)出现在一个作用域内，这个声明就被认为属于整个作用域，并且可以在任何地方访问。</p>
<pre><code class="language-javascript">var a = 2
foo() // 正常运行, foo 已被提升

function foo() {
  a = 3
  console.log(a)   // 3
  var a                        
}

console.log( a )   // 2
</code></pre>
<h3 id="问题-12-解释一下原型设计模式prototype-pattern">问题 12: 解释一下原型设计模式(Prototype Pattern)</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>原型模式会创建新的对象，而不是创建未初始化的对象，它会返回使用从原型或样本对象复制的值进行初始化的对象。原型模式也称为属性模式。<br>
原型模式有用的一个例子是使用与数据库中的默认值匹配的值初始化业务对象。原型对象保留默认值，这些默认值将被复制到新创建的业务对象中。<br>
传统语言很少使用原型模式，但是JavaScript作为一种原型语言，在构建新对象及其原型时使用这种模式。</p>
<h3 id="问题-13-es6-中的临时死区是什么">问题 13: ES6 中的临时死区是什么</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>在 ES6 中，let 和const 跟 var、class和function一样也会被提升，只是在进入作用域和被声明之间有一段时间不能访问它们，这段时间是临时死区(TDZ)。</p>
<pre><code class="language-javascript">//console.log(aLet)  // would throw ReferenceError

let aLet;
console.log(aLet); // undefined
aLet = 10;
console.log(aLet); // 10
</code></pre>
<h3 id="问题-14-什么时候不使用箭头函数-说出三个或更多的例子">问题 14: 什么时候不使用箭头函数? 说出三个或更多的例子</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>不应该使用箭头函数一些情况：</p>
<ul>
<li>当想要函数被提升时(箭头函数是匿名的)</li>
<li>要在函数中使用this/arguments时，由于箭头函数本身不具有this/arguments，因此它们取决于外部上下文</li>
<li>使用命名函数(箭头函数是匿名的)</li>
<li>使用函数作为构造函数时(箭头函数没有构造函数)</li>
<li>当想在对象字面是以将函数作为属性添加并在其中使用对象时，因为咱们无法访问 this 即对象本身。</li>
</ul>
<h3 id="问题-15-es6-中的-weakmap的实际用途是什么">问题 15: ES6 中的 WeakMap的实际用途是什么？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>WeakMaps 提供了一种从外部扩展对象而不影响垃圾收集的方法。当咱们想要扩展一个对象，但是因为它是封闭的或者来自外部源而不能扩展时，可以应用WeakMap。<br>
WeakMap只适用于 ES6 或以上版本。WeakMap是键和值对的集合，其中键必须是对象。</p>
<pre><code class="language-javascript">var map = new WeakMap();
var pavloHero = {
    first: &quot;Pavlo&quot;,
    last: &quot;Hero&quot;
};
var gabrielFranco = {
    first: &quot;Gabriel&quot;,
    last: &quot;Franco&quot;
};
map.set(pavloHero, &quot;This is Hero&quot;);
map.set(gabrielFranco, &quot;This is Franco&quot;);
console.log(map.get(pavloHero)); //This is Hero
</code></pre>
<p>WeakMaps的有趣之处在于，它包含了对map内部键的弱引用。弱引用意味着如果对象被销毁，垃圾收集器将从WeakMap中删除整个条目，从而释放内存。</p>
<h3 id="问题-16-说明下列方法为何不能用作-iife要使其成为-iife需要进行哪些更改">问题 16: 说明下列方法为何不能用作 IIFE，要使其成为 IIFE，需要进行哪些更改？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<pre><code class="language-javascript">function foo(){ }();
</code></pre>
<p>IIFE 代表立即调用的函数表达式。JS解析器读取函数foo(){}();作为函数foo(){}和();，前者是一个函数声明，后者(一对括号)是尝试调用一个函数，但没有指定名称，因此它抛出Uncaught SyntaxError: Unexpected token 异常。<br>
咱们可以使用void操作符:void function foo(){ }();。不幸的是，这种方法有一个问题。给定表达式的求值总是undefined的，所以如果IIFE 函数有返回值，则不能使用它，如下所示：</p>
<pre><code class="language-javascript">const foo = void
function bar() {
    console.log('前端小智')
    return 'foo';
}();

console.log(foo); // undefined
</code></pre>
<h3 id="问题-17-能否比较模块模式与构造函数原型模式的用法">问题 17: 能否比较模块模式与构造函数/原型模式的用法？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>模块模式通常用于命名空间，在该模式中，使用单个实例作为存储来对相关函数和对象进行分组。这是一个不同于原型设计的用例,它们并不是相互排斥,咱们可以同时使用它们(例如，将一个构造函数放在一个模块中，并使用new MyNamespace.MyModule.MyClass(arguments) )。<br>
构造函数和原型是实现类和实例的合理方法之一。它们与模型并不完全对应，因此通常需要选择一个特定的scheme或辅助方法来实现原型中的类。</p>
<h3 id="问题-18-es6-map-和-weakmap-有什么区别">问题 18: ES6 Map 和 WeakMap 有什么区别？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐⭐</p>
</blockquote>
<p>当它们的键/值引用的对象被删除时，它们的行为都不同，以下面的代码为例:</p>
<pre><code class="language-javascript">var map = new Map()
var weakmap = new WeakMap()

(function() {
    var a = {
        x: 12
    };
    var b = {
        y: 12
    };

    map.set(a, 1);
    weakmap.set(b, 2);
})()
</code></pre>
<p>执行上面的 IIFE，就无法再引用{x：12}和{y：12}。垃圾收集器继续运行，并从 WeakMa中删除键b指针，还从内存中删除了{y：12}。<br>
但在使用 Map的情况下，垃圾收集器不会从Map中删除指针，也不会从内存中删除{x：12}。<br>
WeakMap 允许垃圾收集器执行其回收任务，但Map不允许。对于手动编写的 Map，数组将保留对键对象的引用，以防止被垃圾回收。但在WeakMap中，对键对象的引用被“弱”保留，这意味着在没有其他对象引用的情况下，它们不会阻止垃圾回收。</p>
<h3 id="问题-19-举一个柯里化函数的例子并说明柯里化的好处">问题 19: 举一个柯里化函数的例子，并说明柯里化的好处？</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐⭐</p>
</blockquote>
<p>柯里化是一种模式，其中一个具有多个参数的函数被分解成多个函数，当被串联调用时，这些函数将一次累加一个所需的所有参数。这种技术有助于使用函数式编写的代码更容易阅读和编写。需要注意的是，要实现一个函数，它需要从一个函数开始，然后分解成一系列函数，每个函数接受一个参数。</p>
<pre><code class="language-javascript">function curry(fn) {
  if (fn.length === 0) {
    return fn;
  }

  function _curried(depth, args) {
    return function(newArgument) {
      if (depth - 1 === 0) {
        return fn(...args, newArgument);
      }
      return _curried(depth - 1, [...args, newArgument]);
    };
  }

  return _curried(fn.length, []);
}

function add(a, b) {
  return a + b;
}

var curriedAdd = curry(add);
var addFive = curriedAdd(5);

var result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]
</code></pre>
<h3 id="问题-20-如何在-js-中深冻结对象">问题 20: 如何在 JS 中“深冻结”对象</h3>
<blockquote>
<p>主题: JavaScript<br>
难度: ⭐⭐⭐⭐⭐</p>
</blockquote>
<p>如果咱们想要确保对象被深冻结，就必须创建一个递归函数来冻结对象类型的每个属性：</p>
<p>没有深冻结</p>
<pre><code class="language-javascript">let person = {
    name: &quot;Leonardo&quot;,
    profession: {
        name: &quot;developer&quot;
    }
};
Object.freeze(person); 
person.profession.name = &quot;doctor&quot;;
console.log(person); //output { name: 'Leonardo', profession: { name: 'doctor' } }
</code></pre>
<p>深冻结</p>
<pre><code class="language-javascript">function deepFreeze(object) {
    let propNames = Object.getOwnPropertyNames(object);
    for (let name of propNames) {
        let value = object[name];
        object[name] = value &amp;&amp; typeof value === &quot;object&quot; ?
            deepFreeze(value) : value;
    }
    return Object.freeze(object);
}
let person = {
    name: &quot;Leonardo&quot;,
    profession: {
        name: &quot;developer&quot;
    }
};
deepFreeze(person);
person.profession.name = &quot;doctor&quot;; // TypeError: Cannot assign to read only property 'name' of object
</code></pre>
<hr>
<p>作者：<a href="https://juejin.im/post/5dc8a231f265da4d40712f8a">前端小智</a><br>
来源：掘金<br>
著作权归作者所有。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[35 道咱们必须要清楚的 React 面试题]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/35-dao-zan-men-bi-xu-yao-qing-chu-de-react-mian-shi-ti</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/35-dao-zan-men-bi-xu-yao-qing-chu-de-react-mian-shi-ti">
        </link>
        <updated>2019-11-08T02:34:58.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="问题1什么是虚拟dom">问题1：什么是虚拟DOM？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐</p>
</blockquote>
<p>虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="问题1什么是虚拟dom">问题1：什么是虚拟DOM？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐</p>
</blockquote>
<p>虚拟 DOM (VDOM)是真实 DOM 在内存中的表示。UI 的表示形式保存在内存中，并与实际的 DOM 同步。这是一个发生在渲染函数被调用和元素在屏幕上显示之间的步骤，整个过程被称为调和。</p>
<!-- more -->
<h3 id="问题2类组件和函数组件之间的区别是啥">问题2：类组件和函数组件之间的区别是啥？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<ul>
<li>类组件可以使用其他特性，如状态 state 和生命周期钩子。</li>
<li>当组件只是接收 props 渲染到页面时，就是无状态组件，就属于函数组件，也被称为哑组件或展示组件。</li>
</ul>
<p>函数组件和类组件当然是有区别的，而且函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。</p>
<table>
<thead>
<tr>
<th>区别</th>
<th style="text-align:left">函数组件</th>
<th style="text-align:center">类组件</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否有 this</td>
<td style="text-align:left">没有</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td>是否有生命周期</td>
<td style="text-align:left">没有</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td>是否有状态 state</td>
<td style="text-align:left">没有</td>
<td style="text-align:center">有</td>
</tr>
</tbody>
</table>
<h3 id="问题-3react-中-refs-干嘛用的">问题 3：React 中 refs 干嘛用的？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<p>Refs 提供了一种访问在render方法中创建的 DOM 节点或者 React 元素的方法。在典型的数据流中，props 是父子组件交互的唯一方式，想要修改子组件，需要使用新的pros重新渲染它。凡事有例外，某些情况下咱们需要在典型数据流外，强制修改子代，这个时候可以使用 Refs。<br>
咱们可以在组件添加一个 ref 属性来使用，该属性的值是一个回调函数，接收作为其第一个参数的底层 DOM 元素或组件的挂载实例。</p>
<pre><code class="language-javascript">class UnControlledForm extends Component {
  handleSubmit = () =&gt; {
    console.log(&quot;Input Value: &quot;, this.input.value)
  }
  render () {
    return (
      &lt;form onSubmit={this.handleSubmit}&gt;
        &lt;input
          type='text'
          ref={(input) =&gt; this.input = input} /&gt;
        &lt;button type='submit'&gt;Submit&lt;/button&gt;
      &lt;/form&gt;
    )
  }
}
</code></pre>
<p>请注意，input 元素有一个ref属性，它的值是一个函数。该函数接收输入的实际 DOM 元素，然后将其放在实例上，这样就可以在 handleSubmit 函数内部访问它。<br>
经常被误解的只有在类组件中才能使用 refs，但是refs也可以通过利用 JS 中的闭包与函数组件一起使用。</p>
<pre><code class="language-javascript">function CustomForm ({handleSubmit}) {
  let inputElement
  return (
    &lt;form onSubmit={() =&gt; handleSubmit(inputElement.value)}&gt;
      &lt;input
        type='text'
        ref={(input) =&gt; inputElement = input} /&gt;
      &lt;button type='submit'&gt;Submit&lt;/button&gt;
    &lt;/form&gt;
  )
}
</code></pre>
<h3 id="问题-4在-react-中如何处理事件">问题 4：在 React 中如何处理事件</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<p>为了解决跨浏览器的兼容性问题，SyntheticEvent 实例将被传递给你的事件处理函数，SyntheticEvent是 React 跨浏览器的浏览器原生事件包装器，它还拥有和浏览器原生事件相同的接口，包括 stopPropagation() 和 preventDefault()。<br>
比较有趣的是，React 实际上并不将事件附加到子节点本身。React 使用单个事件侦听器侦听顶层的所有事件。这对性能有好处，也意味着 React 在更新 DOM 时不需要跟踪事件监听器。</p>
<h3 id="问题-5state-和-props-区别是啥">问题 5：state 和 props 区别是啥？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<p>props和state是普通的 JS 对象。虽然它们都包含影响渲染输出的信息，但是它们在组件方面的功能是不同的。即</p>
<ul>
<li>state 是组件自己管理数据，控制自己的状态，可变；</li>
<li>props 是外部传入的数据参数，不可变；</li>
<li>没有state的叫做无状态组件，有state的叫做有状态组件；</li>
<li>多用 props，少用 state，也就是多写无状态组件。</li>
</ul>
<h3 id="问题-6如何创建-refs">问题 6：如何创建 refs</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<p>Refs 是使用 React.createRef() 创建的，并通过 ref 属性附加到 React 元素。在构造组件时，通常将 Refs 分配给实例属性，以便可以在整个组件中引用它们。</p>
<pre><code class="language-javascript">class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef();
  }
  render() {
    return &lt;div ref={this.myRef} /&gt;;
  }
}
</code></pre>
<p>或者这样用：</p>
<pre><code class="language-javascript">class UserForm extends Component {
  handleSubmit = () =&gt; {
    console.log(&quot;Input Value is: &quot;, this.input.value)
  }
  render () {
    return (
      &lt;form onSubmit={this.handleSubmit}&gt;
        &lt;input
          type='text'
          ref={(input) =&gt; this.input = input} /&gt; // Access DOM input in handle submit
        &lt;button type='submit'&gt;Submit&lt;/button&gt;
      &lt;/form&gt;
    )
  }
}
</code></pre>
<h3 id="问题-7什么是高阶组件">问题 7：什么是高阶组件？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<p>高阶组件(HOC)是接受一个组件并返回一个新组件的函数。基本上，这是一个模式，是从 React 的组合特性中衍生出来的，称其为纯组件，因为它们可以接受任何动态提供的子组件，但不会修改或复制输入组件中的任何行为。<br>
<code>const EnhancedComponent = higherOrderComponent(WrappedComponent);</code><br>
HOC 可以用于以下许多用例</p>
<ul>
<li>代码重用、逻辑和引导抽象</li>
<li>渲染劫持</li>
<li>state 抽象和操作</li>
<li>props 处理</li>
</ul>
<h3 id="问题-8在构造函数调用-super-并将-props-作为参数传入的作用是啥">问题 8：在构造函数调用 super 并将 props 作为参数传入的作用是啥？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐</p>
</blockquote>
<p>在调用 super() 方法之前，子类构造函数无法使用this引用，ES6 子类也是如此。将 props 参数传递给 super() 调用的主要原因是在子构造函数中能够通过this.props来获取传入的 props。<br>
传递 props</p>
<pre><code class="language-javascript">class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    console.log(this.props);  // { name: 'sudheer',age: 30 }
  }
}
</code></pre>
<p>没传递 props</p>
<pre><code class="language-javascript">class MyComponent extends React.Component {
  constructor(props) {
    super();
    console.log(this.props); // undefined
    // 但是 Props 参数仍然可用
    console.log(props); // Prints { name: 'sudheer',age: 30 }
  }

  render() {
    // 构造函数外部不受影响
    console.log(this.props) // { name: 'sudheer',age: 30 }
  }
}
</code></pre>
<p>上面示例揭示了一点。props 的行为只有在构造函数中是不同的，在构造函数之外也是一样的。</p>
<h3 id="问题-9什么是控制组件">问题 9：什么是控制组件？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>在 HTML 中，表单元素如 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>和<code>&lt;select&gt;</code>通常维护自己的状态，并根据用户输入进行更新。当用户提交表单时，来自上述元素的值将随表单一起发送。<br>
而 React 的工作方式则不同。包含表单的组件将跟踪其状态中的输入值，并在每次回调函数(例如onChange)触发时重新渲染组件，因为状态被更新。以这种方式由 React 控制其值的输入表单元素称为受控组件。</p>
<h3 id="问题-10如何-reactcreateelement">问题 10：如何 React.createElement ？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>问题：</p>
<pre><code class="language-javascript">const element = (
  &lt;h1 className=&quot;greeting&quot;&gt;
    Hello, world!
  &lt;/h1&gt;
)
</code></pre>
<p>上述代码如何使用 React.createElement 来实现:</p>
<pre><code class="language-javascript">const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);
</code></pre>
<h3 id="问题-11讲讲什么是-jsx">问题 11：讲讲什么是 JSX ？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>当 Facebook 第一次发布 React 时，他们还引入了一种新的 JS 方言 JSX，将原始 HTML 模板嵌入到 JS 代码中。JSX 代码本身不能被浏览器读取，必须使用Babel和webpack等工具将其转换为传统的JS。很多开发人员就能无意识使用 JSX，因为它已经与 React 结合在一直了。</p>
<pre><code class="language-javascript">class MyComponent extends React.Component {
  render() {
    let props = this.props;  
    return (
      &lt;div className=&quot;my-component&quot;&gt;
      &lt;a href={props.url}&gt;{props.name}&lt;/a&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
<h3 id="问题-12根据下面定义的代码可以找出存在的两个问题吗">问题 12：根据下面定义的代码，可以找出存在的两个问题吗 ？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>请看下面的代码：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1573181405119.jpg" alt=""></p>
<p>答案：</p>
<p>1.在构造函数没有将 props 传递给 super，它应该包括以下行</p>
<pre><code class="language-javascript">constructor(props) {
  super(props);
  // ...
}
</code></pre>
<p>2.事件监听器(通过addEventListener()分配时)的作用域不正确，因为 ES6 不提供自动绑定。因此，开发人员可以在构造函数中重新分配clickHandler来包含正确的绑定:</p>
<pre><code class="language-javascript">constructor(props) {
  super(props);
  this.clickHandler = this.clickHandler.bind(this);
  // ...
}
</code></pre>
<h3 id="问题-13为什么不直接更新-state-呢">问题 13：为什么不直接更新 state 呢 ?</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>如果试图直接更新 state ，则不会重新渲染组件。</p>
<pre><code class="language-javascript">// 错误
This.state.message = 'Hello world';
</code></pre>
<p>需要使用setState()方法来更新 state。它调度对组件state对象的更新。当state改变时，组件通过重新渲染来响应：</p>
<pre><code class="language-javascript">// 正确做法
This.setState({message: ‘Hello World’});
</code></pre>
<h3 id="问题-14react-组件生命周期有哪些不同阶段">问题 14：React 组件生命周期有哪些不同阶段？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>在组件生命周期中有四个不同的阶段：</p>
<p>1.Initialization：在这个阶段，组件准备设置初始化状态和默认属性。</p>
<p>2.Mounting：react 组件已经准备好挂载到浏览器 DOM 中。这个阶段包括componentWillMount和componentDidMount生命周期方法。</p>
<p>3.Updating：在这个阶段，组件以两种方式更新，发送新的 props 和 state 状态。此阶段包括shouldComponentUpdate、componentWillUpdate和componentDidUpdate生命周期方法。</p>
<p>4.Unmounting：在这个阶段，组件已经不再被需要了，它从浏览器 DOM 中卸载下来。这个阶段包含 componentWillUnmount 生命周期方法。</p>
<p>除以上四个常用生命周期外，还有一个错误处理的阶段：</p>
<p>Error Handling：在这个阶段，不论在渲染的过程中，还是在生命周期方法中或是在任何子组件的构造函数中发生错误，该组件都会被调用。这个阶段包含了 componentDidCatch 生命周期方法。</p>
<figure data-type="image" tabindex="1"><img src="http://lionney.coding.me/lionney.coding.net//post-images/1573181817393.jpg" alt=""></figure>
<h3 id="问题-15react-的生命周期方法有哪些">问题 15：React 的生命周期方法有哪些？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<ul>
<li>
<p>componentWillMount:在渲染之前执行，用于根组件中的 App 级配置。</p>
</li>
<li>
<p>componentDidMount：在第一次渲染之后执行，可以在这里做AJAX请求，DOM 的操作或状态更新以及设置事件监听器。</p>
</li>
<li>
<p>componentWillReceiveProps：在初始化render的时候不会执行，它会在组件接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染</p>
</li>
<li>
<p>shouldComponentUpdate：确定是否更新组件。默认情况下，它返回true。如果确定在 state 或 props 更新后组件不需要在重新渲染，则可以返回false，这是一个提高性能的方法。</p>
</li>
<li>
<p>componentWillUpdate：在shouldComponentUpdate返回 true 确定要更新组件之前件之前执行。</p>
</li>
<li>
<p>componentDidUpdate：它主要用于更新DOM以响应props或state更改。</p>
</li>
<li>
<p>componentWillUnmount：它用于取消任何的网络请求，或删除与组件关联的所有事件监听器。</p>
</li>
</ul>
<h3 id="问题-16这三个点在-react-干嘛用的">问题 16：这三个点(...)在 React 干嘛用的？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p><code>...</code> 在React（使用JSX）代码中做什么？它叫什么？</p>
<pre><code class="language-html">&lt;Modal {...this.props} title='Modal heading'  animation={false}/&gt;
</code></pre>
<p>这个叫扩展操作符号或者展开操作符，例如，如果this.props包含a：1和b：2，则</p>
<pre><code class="language-html">&lt;Modal {...this.props} title='Modal heading' animation={false}&gt;
</code></pre>
<p>等价于下面内容：</p>
<pre><code class="language-html">&lt;Modal a={this.props.a} b={this.props.b} title='Modal heading' animation={false}&gt;
</code></pre>
<p>扩展符号不仅适用于该用例，而且对于创建具有现有对象的大多数（或全部）属性的新对象非常方便，在更新state 咱们就经常这么做：</p>
<pre><code class="language-javascript">this.setState(prevState =&gt; {
    return {foo: {...prevState.foo, a: &quot;updated&quot;}};
});
</code></pre>
<h3 id="问题-17使用-react-hooks-好处是啥">问题 17：使用 React Hooks 好处是啥？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>首先，Hooks 通常支持提取和重用跨多个组件通用的有状态逻辑，而无需承担高阶组件或渲染 props 的负担。Hooks 可以轻松地操作函数组件的状态，而不需要将它们转换为类组件。<br>
Hooks 在类中不起作用，通过使用它们，咱们可以完全避免使用生命周期方法，例如 componentDidMount、componentDidUpdate、componentWillUnmount。相反，使用像useEffect这样的内置钩子。</p>
<h3 id="问题-18什么是-react-hooks">问题 18：什么是 React Hooks？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>Hooks是 React 16.8 中的新添加内容。它们允许在不编写类的情况下使用state和其他 React 特性。使用 Hooks，可以从组件中提取有状态逻辑，这样就可以独立地测试和重用它。Hooks 允许咱们在不改变组件层次结构的情况下重用有状态逻辑，这样在许多组件之间或与社区共享 Hooks 变得很容易。</p>
<h3 id="问题-19react-中的-usestate-是什么">问题 19：React 中的 useState() 是什么？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>下面说明useState(0)的用途：</p>
<pre><code class="language-javascript">...
const [count, setCounter] = useState(0);
const [moreStuff, setMoreStuff] = useState(...);
...

const setCount = () =&gt; {
    setCounter(count + 1);
    setMoreStuff(...);
    ...
};
</code></pre>
<p>useState 是一个内置的 React Hook。useState(0) 返回一个元组，其中第一个参数count是计数器的当前状态，setCounter 提供更新计数器状态的方法。<br>
咱们可以在任何地方使用setCounter方法更新计数状态-在这种情况下，咱们在setCount函数内部使用它可以做更多的事情，使用 Hooks，能够使咱们的代码保持更多功能，还可以避免过多使用基于类的组件。</p>
<h3 id="问题-20react-中的strictmode严格模式是什么">问题 20：React 中的StrictMode(严格模式)是什么？？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>React 的StrictMode是一种辅助组件，可以帮助咱们编写更好的 react 组件，可以使用<code>&lt;StrictMode /&gt;</code>包装一组组件，并且可以帮咱们以下检查：</p>
<ul>
<li>
<p>验证内部组件是否遵循某些推荐做法，如果没有，会在控制台给出警告。</p>
</li>
<li>
<p>验证是否使用的已经废弃的方法，如果有，会在控制台给出警告。</p>
</li>
<li>
<p>通过识别潜在的风险预防一些副作用。</p>
</li>
</ul>
<h3 id="问题-21为什么类方法需要绑定到类实例">问题 21：为什么类方法需要绑定到类实例？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>在 JS 中，this 值会根据当前上下文变化。在 React 类组件方法中，开发人员通常希望 this 引用组件的当前实例，因此有必要将这些方法绑定到实例。通常这是在构造函数中完成的:</p>
<pre><code class="language-javascript">class SubmitButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isFormSubmitted: false
    };
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit() {
    this.setState({
      isFormSubmitted: true
    });
  }

  render() {
    return (
      &lt;button onClick={this.handleSubmit}&gt;Submit&lt;/button&gt;
    )
  }
}
</code></pre>
<h3 id="问题-22什么是-prop-drilling如何避免">问题 22：什么是 prop drilling，如何避免？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>在构建 React 应用程序时，在多层嵌套组件来使用另一个嵌套组件提供的数据。最简单的方法是将一个 prop 从每个组件一层层的传递下去，从源组件传递到深层嵌套组件，这叫做prop drilling。<br>
prop drilling的主要缺点是原本不需要数据的组件变得不必要地复杂，并且难以维护。<br>
为了避免prop drilling，一种常用的方法是使用React Context。通过定义提供数据的Provider组件，并允许嵌套的组件通过Consumer组件或useContext Hook 使用上下文数据。</p>
<h3 id="问题-23描述-flux-与-mvc">问题 23：描述 Flux 与 MVC？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p>传统的 MVC 模式在分离数据(Model)、UI(View和逻辑(Controller)方面工作得很好，但是 MVC 架构经常遇到两个主要问题:</p>
<p><strong>数据流不够清晰</strong>:跨视图发生的级联更新常常会导致混乱的事件网络，难于调试。</p>
<p><strong>缺乏数据完整性</strong>:模型数据可以在任何地方发生突变，从而在整个UI中产生不可预测的结果。</p>
<p>使用 Flux 模式的复杂用户界面不再遭受级联更新，任何给定的React 组件都能够根据 store 提供的数据重建其状态。Flux 模式还通过限制对共享数据的直接访问来加强数据完整性。</p>
<h3 id="问题-24受控组件和非受控组件区别是啥">问题 24：受控组件和非受控组件区别是啥？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐</p>
</blockquote>
<p><strong>受控组件</strong>是 React 控制中的组件，并且是表单数据真实的唯一来源。<br>
非受控组件是由 DOM 处理表单数据的地方，而不是在 React 组件中。</p>
<p>尽管非受控组件通常更易于实现，因为只需使用refs即可从 DOM 中获取值，但通常建议优先选择受控制的组件，而不是非受控制的组件。<br>
这样做的主要原因是受控组件支持即时字段验证，允许有条件地禁用/启用按钮，强制输入格式。</p>
<h3 id="问题-25这段代码有什么问题吗">问题 25：这段代码有什么问题吗？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>这段代码有什么问题:</p>
<pre><code class="language-javascript">this.setState((prevState, props) =&gt; {
  return {
    streak: prevState.streak + props.count
  }
})
</code></pre>
<p>答案：</p>
<p>没有什么问题。这种方式很少被使用，咱们可以将一个函数传递给setState，该函数接收上一个 state 的值和当前的props，并返回一个新的状态，如果咱们需要根据以前的状态重新设置状态，推荐使用这种方式。</p>
<h3 id="问题-26什么是-react-context">问题 26：什么是 React Context?</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>Context 通过组件树提供了一个传递数据的方法，从而避免了在每一个层级手动的传递 props 属性。</p>
<h3 id="问题-27什么是-react-fiber">问题 27：什么是 React Fiber?</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>Fiber 是 React 16 中新的协调引擎或重新实现核心算法。它的主要目标是支持虚拟DOM的增量渲染。React Fiber 的目标是提高其在动画、布局、手势、暂停、中止或重用等方面的适用性，并为不同类型的更新分配优先级，以及新的并发原语。<br>
React Fiber 的目标是增强其在动画、布局和手势等领域的适用性。它的主要特性是增量渲染:能够将渲染工作分割成块，并将其分散到多个帧中。</p>
<h3 id="问题-28如何在-reactjs-的-props上应用验证">问题 28：如何在 ReactJS 的 Props上应用验证？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>当应用程序在开发模式下运行时，React 将自动检查咱们在组件上设置的所有 props，以确保它们具有正确的数据类型。对于不正确的类型，开发模式下会在控制台中生成警告消息，而在生产模式中由于性能影响而禁用它。强制的 props 用 isRequired定义的。</p>
<p>下面是一组预定义的 prop 类型:</p>
<ul>
<li>React.PropTypes.string</li>
<li>React.PropTypes.number</li>
<li>React.PropTypes.func</li>
<li>React.PropTypes.node</li>
<li>React.PropTypes.bool</li>
</ul>
<p>例如，咱们为用户组件定义了如下的propTypes</p>
<pre><code class="language-javascript">import PropTypes from 'prop-types';

class User extends React.Component {
  render() {
    return (
      &lt;h1&gt;Welcome, {this.props.name}&lt;/h1&gt;
      &lt;h2&gt;Age, {this.props.age}
    );
  }
}

User.propTypes = {
  name: PropTypes.string.isRequired,
  age: PropTypes.number.isRequired
};
</code></pre>
<h3 id="问题-29在-react-中使用构造函数和-getinitialstate-有什么区别">问题 29：在 React 中使用构造函数和 getInitialState 有什么区别？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>构造函数和getInitialState之间的区别就是ES6和ES5本身的区别。在使用ES6类时，应该在构造函数中初始化state，并在使用React.createClass时定义getInitialState方法。</p>
<pre><code class="language-javascript">class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = { /* initial state */ };
  }
}
</code></pre>
<p>等价于：</p>
<pre><code class="language-javascript">var MyComponent = React.createClass({
  getInitialState() {
    return { /* initial state */ };
  },
});
</code></pre>
<h3 id="问题-30如何有条件地向-react-组件添加属性">问题 30：如何有条件地向 React 组件添加属性？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>对于某些属性，React 非常聪明，如果传递给它的值是虚值，可以省略该属性。例如：</p>
<pre><code class="language-javascript">var InputComponent = React.createClass({
    render: function() {
      var required = true;
      var disabled = false;

      return (
        &lt;input type=&quot;text&quot; disabled={disabled} required={required} /&gt;
      );
    }
});
</code></pre>
<p>渲染结果：</p>
<pre><code class="language-html">&lt;input type=&quot;text&quot; required&gt;
</code></pre>
<p>另一种可能的方法是：</p>
<pre><code class="language-javascript">var condition = true;

var component = (
  &lt;div
    value=&quot;foo&quot;
    { ...( condition &amp;&amp; { disabled: true } ) } /&gt;
);
</code></pre>
<h3 id="问题-31hooks会取代-render-props-和高阶组件吗">问题 31：Hooks会取代 render props 和高阶组件吗？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>通常，render props和高阶组件仅渲染一个子组件。React团队认为，Hooks 是服务此用例的更简单方法。</p>
<p>这两种模式仍然有一席之地(例如，一个虚拟的 scroller 组件可能有一个 renderItem prop，或者一个可视化的容器组件可能有它自己的 DOM 结构)。但在大多数情况下，Hooks 就足够了，可以帮助减少树中的嵌套。</p>
<h3 id="问题-32如何避免组件的重新渲染">问题 32：如何避免组件的重新渲染？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐</p>
</blockquote>
<p>React 中最常见的问题之一是组件不必要地重新渲染。React 提供了两个方法，在这些情况下非常有用：</p>
<ul>
<li>
<p>React.memo():这可以防止不必要地重新渲染函数组件</p>
</li>
<li>
<p>PureComponent:这可以防止不必要地重新渲染类组件</p>
</li>
</ul>
<p>这两种方法都依赖于对传递给组件的props的浅比较，如果 props 没有改变，那么组件将不会重新渲染。虽然这两种工具都非常有用，但是浅比较会带来额外的性能损失，因此如果使用不当，这两种方法都会对性能产生负面影响。</p>
<p>通过使用 React Profiler，可以在使用这些方法前后对性能进行测量，从而确保通过进行给定的更改来实际改进性能。</p>
<h3 id="问题-33什么是纯函数">问题 33：什么是纯函数？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐⭐</p>
</blockquote>
<p>纯函数是不依赖并且不会在其作用域之外修改变量状态的函数。本质上，纯函数始终在给定相同参数的情况下返回相同结果。</p>
<h3 id="问题-34当调用setstate时react-render-是如何工作的">问题 34：当调用setState时，React render 是如何工作的？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐⭐</p>
</blockquote>
<p>咱们可以将&quot;render&quot;分为两个步骤：</p>
<p>1.虚拟 DOM 渲染:当render方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用setState()时，render会被再次调用，因为默认情况下shouldComponentUpdate总是返回true，所以默认情况下 React 是没有优化的。</p>
<p>2.原生 DOM 渲染:React 只会在虚拟DOM中修改真实DOM节点，而且修改的次数非常少——这是很棒的React特性，它优化了真实DOM的变化，使React变得更快。</p>
<h3 id="问题-35如何避免在react重新绑定实例">问题 35：如何避免在React重新绑定实例？</h3>
<blockquote>
<p>主题: React<br>
难度: ⭐⭐⭐⭐⭐</p>
</blockquote>
<p>有几种常用方法可以避免在 React 中绑定方法：</p>
<p>1.将事件处理程序定义为内联箭头函数</p>
<pre><code class="language-javascript">class SubmitButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isFormSubmitted: false
    };
  }

  render() {
    return (
      &lt;button onClick={() =&gt; {
        this.setState({ isFormSubmitted: true });
      }}&gt;Submit&lt;/button&gt;
    )
  }
}
</code></pre>
<p>2.使用箭头函数来定义方法：</p>
<pre><code class="language-javascript">class SubmitButton extends React.Component {
  state = {
    isFormSubmitted: false
  }

  handleSubmit = () =&gt; {
    this.setState({
      isFormSubmitted: true
    });
  }

  render() {
    return (
      &lt;button onClick={this.handleSubmit}&gt;Submit&lt;/button&gt;
    )
  }
}
</code></pre>
<p>3.使用带有 Hooks 的函数组件</p>
<pre><code class="language-javascript">const SubmitButton = () =&gt; {
  const [isFormSubmitted, setIsFormSubmitted] = useState(false);

  return (
    &lt;button onClick={() =&gt; {
        setIsFormSubmitted(true);
    }}&gt;Submit&lt;/button&gt;
  )
};
</code></pre>
<p>作者：<a href="https://juejin.im/post/5dc20a4ff265da4d4e30040b">前端小智</a><br>
来源：掘金<br>
著作权归作者所有。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一波ESLint小技巧]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/yi-bo-eslint-xiao-ji-qiao</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/yi-bo-eslint-xiao-ji-qiao">
        </link>
        <updated>2019-10-29T03:18:37.000Z</updated>
        <summary type="html"><![CDATA[<p>最近借鉴总结了一波ESLint的小技巧，以记录自己的学习心得。现分享给大家，以供参考。如有不足，还请多多指教，谢谢大家。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近借鉴总结了一波ESLint的小技巧，以记录自己的学习心得。现分享给大家，以供参考。如有不足，还请多多指教，谢谢大家。</p>
<!-- more -->
<p>参考文献：</p>
<ul>
<li>1-VScode格式化ESlint-方法（最全最好用方法！）<a href="https://www.jianshu.com/p/23a5d6194a4b">Jump</a></li>
<li>我是如何在公司项目中使用ESLint来提升代码质量的<a href="https://www.imooc.com/article/32222">Jump</a></li>
<li>vue-cli项目中 eslint语法检测在单文件中关闭检测的几种方式<a href="https://blog.csdn.net/csl125/article/details/86591186">Jump</a></li>
</ul>
<h3 id="关于eslint">关于ESLint</h3>
<p>在团队开发中，出于代码规范的考虑，我们通常按照ESlint规范书写代码。加入ESLint有非常多的好处，比如说可以帮助我们避免一些非常低级的错误，一些格式上的问题导致我们在运行生产环境的时候出现一些不明所以的报错。还有就是在跟团队协作的时候，每个人都保持同一个风格进行代码书写，这样团队内部相互去看别人的代码的时候，就可以更容易的看懂。<br>
但有些低级的格式问题经常被死板的ESLint卡住。。。所以我们应该有个自动格式化工具。</p>
<h3 id="vue文件一键格式化">Vue文件一键格式化</h3>
<p>在vscode的文件-首选项-设置里，右侧配置里添加如下代码即可（代码有注释！），从此直接 Ctrl+S就能一键格式化了</p>
<pre><code class="language-json">{
  // &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Program Files\\Git\\bin\\bash.exe&quot;,
  &quot;vetur.validation.template&quot;: false,
  &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,
  &quot;vetur.format.defaultFormatter.ts&quot;: &quot;vscode-typescript&quot;,
  &quot;window.zoomLevel&quot;: 2,
  &quot;editor.tabSize&quot;: 2,
  &quot;files.autoSave&quot;: &quot;off&quot;,
  &quot;eslint.validate&quot;: [
    &quot;javascript&quot;,
    &quot;javascriptreact&quot;,
    &quot;html&quot;,
    {
      &quot;language&quot;: &quot;vue&quot;,
      &quot;autoFix&quot;: true
    }
  ],
  &quot;eslint.options&quot;: {
    &quot;plugins&quot;: [
      &quot;html&quot;
    ]
  },
  &quot;git.ignoreMissingGitWarning&quot;: true,
  // &quot;git.autofetch&quot;: true
  &quot;editor.wordWrap&quot;: &quot;on&quot;,
  &quot;search.location&quot;: &quot;sidebar&quot;,
  &quot;javascript.updateImportsOnFileMove.enabled&quot;: &quot;always&quot;,
  &quot;liveServer.settings.donotShowInfoMsg&quot;: true,
  &quot;liveServer.settings.donotVerifyTags&quot;: true,
  &quot;workbench.colorCustomizations&quot;: {
    &quot;activityBarBadge.background&quot;: &quot;#2979FF&quot;,
    &quot;list.activeSelectionForeground&quot;: &quot;#2979FF&quot;,
    &quot;list.inactiveSelectionForeground&quot;: &quot;#2979FF&quot;,
    &quot;list.highlightForeground&quot;: &quot;#2979FF&quot;,
    &quot;scrollbarSlider.activeBackground&quot;: &quot;#2979FF50&quot;,
    &quot;editorSuggestWidget.highlightForeground&quot;: &quot;#2979FF&quot;,
    &quot;textLink.foreground&quot;: &quot;#2979FF&quot;,
    &quot;progressBar.background&quot;: &quot;#2979FF&quot;,
    &quot;pickerGroup.foreground&quot;: &quot;#2979FF&quot;,
    &quot;tab.activeBorder&quot;: &quot;#2979FF&quot;,
    &quot;notificationLink.foreground&quot;: &quot;#2979FF&quot;,
    &quot;editorWidget.resizeBorder&quot;: &quot;#2979FF&quot;,
    &quot;editorWidget.border&quot;: &quot;#2979FF&quot;,
    &quot;settings.modifiedItemIndicator&quot;: &quot;#2979FF&quot;,
    &quot;settings.headerForeground&quot;: &quot;#2979FF&quot;,
    &quot;panelTitle.activeBorder&quot;: &quot;#2979FF&quot;,
    &quot;breadcrumb.activeSelectionForeground&quot;: &quot;#2979FF&quot;,
    &quot;menu.selectionForeground&quot;: &quot;#2979FF&quot;,
    &quot;menubar.selectionForeground&quot;: &quot;#2979FF&quot;,
    &quot;editor.findMatchBorder&quot;: &quot;#2979FF&quot;,
    &quot;selection.background&quot;: &quot;#2979FF40&quot;
  },
  &quot;materialTheme.accent&quot;: &quot;Blue&quot;,
  &quot;terminal.integrated.rendererType&quot;: &quot;dom&quot;,
  // vscode默认启用了根据文件类型自动设置tabsize的选项
  &quot;editor.detectIndentation&quot;: false,
  // 重新设定tabsize
  &quot;editor.tabSize&quot;: 2,
  // #每次保存的时候自动格式化 
  &quot;editor.formatOnSave&quot;: true,
  // #每次保存的时候将代码按eslint格式进行修复
  &quot;eslint.autoFixOnSave&quot;: true,
  // 添加 vue 支持
  &quot;eslint.validate&quot;: [
    &quot;javascript&quot;,
    &quot;javascriptreact&quot;,
    {
      &quot;language&quot;: &quot;vue&quot;,
      &quot;autoFix&quot;: true
    }
  ],
  //  #让prettier使用eslint的代码格式进行校验 
  &quot;prettier.eslintIntegration&quot;: true,
  //  #去掉代码结尾的分号 
  &quot;prettier.semi&quot;: false,
  //  #使用带引号替代双引号 
  &quot;prettier.singleQuote&quot;: true,
  //  #让函数(名)和后面的括号之间加个空格
  &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true,
  // #这个按用户自身习惯选择 
  &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,
  // #让vue中的js按编辑器自带的ts格式进行格式化 
  &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,
  &quot;vetur.format.defaultFormatterOptions&quot;: {
    &quot;js-beautify-html&quot;: {
      &quot;wrap_attributes&quot;: &quot;force-aligned&quot;
      // #vue组件中html代码格式化样式
    }
  },
  // 格式化stylus, 需安装Manta's Stylus Supremacy插件
  &quot;stylusSupremacy.insertColons&quot;: false, // 是否插入冒号
  &quot;stylusSupremacy.insertSemicolons&quot;: false, // 是否插入分好
  &quot;stylusSupremacy.insertBraces&quot;: false, // 是否插入大括号
  &quot;stylusSupremacy.insertNewLineAroundImports&quot;: false, // import之后是否换行
  &quot;stylusSupremacy.insertNewLineAroundBlocks&quot;: false, // 两个选择器中是否换行
  &quot;[markdown]&quot;: {
    &quot;editor.defaultFormatter&quot;: &quot;yzhang.markdown-all-in-one&quot;
  },
  &quot;editor.fontSize&quot;: 16
}
</code></pre>
<h3 id="自动修复报错">自动修复报错</h3>
<p>在报很多错误之后，如果我们一条一条地去修复，就会变的非常的麻烦，相信刚接触ESLint的童鞋都深有体会。其实这些错误都可以让ESLint帮助我们自动地修复。</p>
<p>在命令行输入：<br>
<code>npm run lint -- --fix</code><br>
你会发现，世界一下安静了许多，没有那么多飘红的报错，没有满屏的error和warning。</p>
<h3 id="组件内关闭eslint检测">组件内关闭eslint检测</h3>
<p>直接在代码文件中以注释的方式定义 需要注意的是，代码文件内以注释配置的规则会覆盖配置文件里的规则，即优先级要更高。</p>
<p>临时在一段代码中取消eslint检查，可以如下设置：</p>
<pre><code class="language-javascript">/* eslint-disable */
 
// Disables all rules between comments 
alert(‘foo’);
 
/* eslint-enable */
</code></pre>
<p>临时在一段代码中取消个别规则的检查（如no-alert, no-console）：</p>
<pre><code class="language-javascript">/* eslint-disable no-alert, no-console */
 
// Disables no-alert and no-console warnings between comments 
alert(‘foo’); 
console.log(‘bar’);
 
/* eslint-enable no-alert, no-console */
</code></pre>
<p>在整个文件中取消eslint检查：</p>
<pre><code class="language-javascript">/* eslint-disable */
 
// Disables all rules for the rest of the file 
alert(‘foo’);
</code></pre>
<p>在整个文件中禁用某一项eslint规则的检查：</p>
<pre><code class="language-javascript">/* eslint-disable no-alert */
 
// Disables no-alert for the rest of the file 
alert(‘foo’);
</code></pre>
<p>针对某一行禁用eslint检查：</p>
<pre><code class="language-javascript">alert(‘foo’); // eslint-disable-line
 
// eslint-disable-next-line 
alert(‘foo’);
</code></pre>
<p>针对某一行的某一具体规则禁用eslint检查：</p>
<pre><code class="language-javascript">alert(‘foo’); // eslint-disable-line no-alert
 
// eslint-disable-next-line no-alert 
alert(‘foo’);
</code></pre>
<p>针对某一行禁用多项具体规则的检查：</p>
<pre><code class="language-javascript">alert(‘foo’); // eslint-disable-line no-alert, quotes, semi
 
// eslint-disable-next-line no-alert, quotes, semi 
alert(‘foo’); 
</code></pre>
<h3 id="总结">总结</h3>
<p>……其实都是些取巧的小方法。<br>
路漫漫其修远兮，与诸君共勉。<br>
PMP，必胜！！！</p>
<hr>
<p>作者：豆包君<br>
链接：<a href="https://juejin.im/post/5db6b901518825552e29a760">https://juejin.im/post/5db6b901518825552e29a760</a><br>
来源：掘金<br>
著作权归作者所有。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[13 个 JS 数组精简技巧，一起来看看]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/13-ge-js-shu-zu-jing-jian-ji-qiao-yi-qi-lai-kan-kan</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/13-ge-js-shu-zu-jing-jian-ji-qiao-yi-qi-lai-kan-kan">
        </link>
        <updated>2019-10-28T06:53:12.000Z</updated>
        <summary type="html"><![CDATA[<p>数组是 JS 最常见的一种数据结构，咱们在开发中也经常用到,在这篇文章中,提供一些小技巧,帮助咱们提高开发效率。</p>
]]></summary>
        <content type="html"><![CDATA[<p>数组是 JS 最常见的一种数据结构，咱们在开发中也经常用到,在这篇文章中,提供一些小技巧,帮助咱们提高开发效率。</p>
<!-- more -->
<h3 id="1-删除数组的重复项">1. 删除数组的重复项</h3>
<figure data-type="image" tabindex="1"><img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245823432.jpg" alt=""></figure>
<h3 id="2-替换数组中的特定值">2. 替换数组中的特定值</h3>
<p>有时在创建代码时需要替换数组中的特定值，有一种很好的简短方法可以做到这一点，咱们可以使用<code>.splice(start、value to remove、valueToAdd)</code>，这些参数指定咱们希望从哪里开始修改、修改多少个值和替换新值。<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245838872.jpg" alt=""></p>
<h3 id="3-arrayfrom-达到-map-的效果">3. Array.from 达到 .map 的效果</h3>
<p>咱们都知道 .map() 方法，.from() 方法也可以用来获得类似的效果且代码也很简洁。<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245854556.jpg" alt=""></p>
<h3 id="4置空数组">4.置空数组</h3>
<p>有时候我们需要清空数组，一个快捷的方法就是直接让数组的 length 属性为 0，就可以清空数组了。<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245861070.jpg" alt=""></p>
<h3 id="5-将数组转换为对象">5. 将数组转换为对象</h3>
<p>有时候，出于某种目的，需要将数组转化成对象，一个简单快速的方法是就使用展开运算符号(...):<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245879011.jpg" alt=""></p>
<h3 id="6-用数据填充数组">6. 用数据填充数组</h3>
<p>在某些情况下，当咱们创建一个数组并希望用一些数据来填充它，这时 .fill()方法可以帮助咱们。<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245899008.jpg" alt=""></p>
<h3 id="7-数组合并">7. 数组合并</h3>
<p>使用展开操作符，也可以将多个数组合并起来。<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245910308.jpg" alt=""></p>
<h3 id="8求两个数组的交集">8.求两个数组的交集</h3>
<p>求两个数组的交集在面试中也是有一定难度的正点，为了找到两个数组的交集，首先使用上面的方法确保所检查数组中的值不重复，接着使用.filter 方法和.includes方法。如下所示：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245919222.jpg" alt=""></p>
<h3 id="9从数组中删除虚值">9.从数组中删除虚值</h3>
<p>在 JS 中，虚值有 false, 0，''， null, NaN, undefined。咱们可以 .filter() 方法来过滤这些虚值。<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245928056.jpg" alt=""></p>
<h3 id="10-从数组中获取随机值">10. 从数组中获取随机值</h3>
<p>有时我们需要从数组中随机选择一个值。一种方便的方法是可以根据数组长度获得一个随机索引，如下所示：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245936487.jpg" alt=""></p>
<h3 id="11反转数组">11.反转数组</h3>
<p>现在，咱们需要反转数组时，没有必要通过复杂的循环和函数来创建它，数组的 reverse 方法就可以做了：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245946150.jpg" alt=""></p>
<h3 id="12-lastindexof-方法">12 lastIndexOf() 方法</h3>
<figure data-type="image" tabindex="2"><img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245956829.jpg" alt=""></figure>
<h3 id="13对数组中的所有值求和">13.对数组中的所有值求和</h3>
<p>JS 面试中也经常用 reduce 方法来巧妙的解决问题<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1572245965279.jpg" alt=""></p>
<h3 id="总结">总结</h3>
<p>在本文中，介绍了13个技巧，希望它们可以帮助编写简洁代码，如果你还有更好的办法，欢迎留言讨论。<br>
代码部署后可能存在的BUG没法实时知道，事后为了解决这些BUG，花了大量的时间进行log 调试，这边顺便给大家推荐一个好用的BUG监控工具 Fundebug。</p>
<p>原文：<br>
<a href="https://dev.to/duomly/13-useful-javascript-array-tips-and-tricks-you-should-know-2jfo">dev.to/duomly/13-u…</a></p>
<hr>
<p>作者：<a href="https://juejin.im/post/5db62f1bf265da4d560906ab">前端小智</a><br>
来源：掘金<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自己搭建ss/ssr服务器教程]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/zi-ji-da-jian-ssssr-fu-wu-qi-jiao-cheng</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/zi-ji-da-jian-ssssr-fu-wu-qi-jiao-cheng">
        </link>
        <updated>2019-10-21T08:07:37.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>2018.2.23对教程的一些细节进行补充，方便初学者。</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p><strong>2018.2.23对教程的一些细节进行补充，方便初学者。</strong></p>
<!-- more -->
<p>【客户端下载】</p>
<p>第一次电脑系统使用SSR/SS客户端时，需要安装NET Framework 4.0，不然无法正常使用，<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=17718">微软官网下载</a>。NET Framework 4.0是SSR/SS的运行库，没有这个SSR/SS客户端无法正常运行。有的电脑系统可能会自带NET Framework 4.0。</p>
<p>Windows SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases">下载地址</a> <a href="https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z">备用下载地址</a></p>
<p>MAC SSR客户端 <a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases">下载地址</a> <a href="https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482">备用下载地址</a></p>
<p>Linux客户端一键安装配置 <a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr">使用脚本</a> (使用方法见注释) 或者采用图形界面的<a href="https://github.com/erguotou520/electron-ssr/releases">linux ssr客户端</a></p>
<p>安卓 SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases">下载地址</a> <a href="https://nofile.io/f/rvTJoj0h5GC/shadowsocksr-release.apk">备用下载地址</a></p>
<p>苹果手机SSR客户端：Potatso Lite、Potatso、shadowrocket都可以作为SSR客户端，但这些软件目前已经在国内的app商店下架，可以用美区的appid账号来下载。但是，如果你配置的SSR账号兼容SS客户端，或者协议选择origin且混淆选择plain，那么你可以选择苹果SS客户端软件（即协议和混淆可以不填），APP商店里面有很多，比如：openwingy、superwingy、bestwingy、wingy+、greatwingy等。</p>
<p><strong>有了客户端后我们需要自己搭建服务器创建ss/ssr账号才能翻墙。提供ss/ssr免费账号 有需求的人可以使用。</strong></p>
<h3 id="搭建教程">搭建教程</h3>
<h3 id="为什么不怕被封ip因为vultr可以随时删除和创建服务器新服务器就是新的ip所以不怕被封ip">为什么不怕被封ip？因为vultr可以随时删除和创建服务器，新服务器就是新的ip，所以不怕被封ip。</h3>
<p><strong>教程很简单，整个教程分三步</strong>：</p>
<p>第一步：购买VPS服务器</p>
<p>第二步：一键部署VPS服务器</p>
<p>第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）</p>
<hr>
<p><strong>第一步：购买VPS服务器</strong></p>
<p>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高，按小时计费，能够随时开通和删除服务器，新服务器即是新ip。</p>
<p>vultr注册地址： <a href="http://www.vultr.com/?ref=7048874">http://www.vultr.com/?ref=7048874</a> （全球15个服务器位置可选，KVM框架，最低2.5美元/月）</p>
<figure data-type="image" tabindex="1"><a href="https://www.vultr.com/?ref=7048874"><img src="https://camo.githubusercontent.com/e5b4fc7834baffafe9883ac40cc7f296e62f9741/68747470733a2f2f7777772e76756c74722e636f6d2f6d656469612f62616e6e65725f322e706e67" alt="img"></a></figure>
<p>虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。</p>
<p>注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal（首选）或支付宝，使用paypal有银行卡（包括信用卡）即可。paypal注册地址：<a href="https://www.paypal.com/">https://www.paypal.com</a> （paypal是国际知名的第三方支付服务商，注册一下账号，绑定银行卡即可购买国外商品）</p>
<p>2.5美元/月的服务器配置信息：单核 512M内存 20G SSD硬盘 带宽峰值100M 500G流量/月</p>
<p>5美元/月的服务器配置信息： 单核 1G内存 25G SSD硬盘 带宽峰值100M 1000G流量/月</p>
<p>10美元/月的服务器配置信息： 单核 2G内存 40G SSD硬盘 带宽峰值100M 2000G流量/月</p>
<p>20美元/月的服务器配置信息： 2cpu 4G内存 60G SSD硬盘 带宽峰值100M 3000G流量/月</p>
<p>40美元/月的服务器配置信息： 4cpu 8G内存 100G SSD硬盘 带宽峰值100M 4000G流量/月</p>
<p><strong>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后速度不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，方便且实用。因为新的服务器就是新的ip，所以当ip被墙时这个方法很有用。当ip被墙时，为了保证新开的服务器ip和原先的ip不一样，先开新服务器，开好后再删除旧服务器即可。</strong></p>
<p>计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。在账号的Billing选项里可以看到账户余额。</p>
<p>温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，这与中国电信、中国联通、中国移动国际出口带宽和线路不同有关，所以以实测为准。可以先选定一个服务器位置来按照教程进行搭建，熟悉搭建方法，当账号搭建完成并进行了bbr加速后，测试下速度自己是否满意，如果满意那就用这个服务器位置的服务器。如果速度不太满意，就一次性开几台不同的服务器位置的服务器，然后按照同样的方法来进行搭建并测试，选择最优的，之后把其它的服务器删掉，按小时计费测试成本可以忽略。</p>
<p>如图：</p>
<figure data-type="image" tabindex="2"><a href="https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png"><img src="https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png" alt="img"></a></figure>
<figure data-type="image" tabindex="3"><a href="https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png"><img src="https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png" alt="img"></a></figure>
<p><strong>vps服务器系统推荐选择CentOS 6.X64位的系统（系统版本不要选centos7！centos7默认的防火墙会阻止ssr的正常连接！）。完成购买后，找到系统的密码记下来，部署服务器时需要用到。</strong></p>
<p>如图：<br>
<a href="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B01.png"><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B01.png" alt="img"></a></p>
<figure data-type="image" tabindex="4"><a href="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B02.png"><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B02.png" alt="img"></a></figure>
<figure data-type="image" tabindex="5"><a href="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B04.png"><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B04.png" alt="img"></a></figure>
<p><strong>不要选centos7系统！点击图中的CentOS几个字，会弹出centos6，然后选中centos6！entos7默认的防火墙可能会干扰ssr的正常连接！</strong></p>
<blockquote>
<p>接下来这一步是开启vps的ipv6 ip，选填项。如果你的电脑系统可以用ipv6，那么可以勾选此项。大多数用户没有这个需求，但有一些用户可能会用到，所以补充了这部分内容。</p>
</blockquote>
<figure data-type="image" tabindex="6"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/ssripv6-01.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/ssripv6-01.png" alt="img"></a></figure>
<figure data-type="image" tabindex="7"><a href="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B05.png"><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B05.png" alt="img"></a></figure>
<figure data-type="image" tabindex="8"><a href="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B06.png"><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B06.png" alt="img"></a></figure>
<blockquote>
<p>如果你开启了vps的ipv6，那么在后台的settings选项可以找到服务器的ipv6 ip。在部署SSR账号时，你用ipv6 ip就行。整个部署及使用过程中，记得把电脑系统开启ipv6喔。</p>
</blockquote>
<figure data-type="image" tabindex="9"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/ssripv6-02.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/ssripv6-02.png" alt="img"></a></figure>
<hr>
<p><strong>第二步：部署VPS服务器</strong></p>
<p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：</p>
<p><a href="http://45.32.141.248:8000/f/d91974d046/">国外云盘1下载</a></p>
<p><a href="https://nofile.io/f/eb5dUzYMQK4/Xshell_setup_wm.exe">国外云盘2下载</a> 提取密码：666</p>
<p><a href="https://www.adrive.com/public/NdK3Ez/Xshell_setup_wm.exe">国外云盘3下载</a> 密码：123</p>
<p>如果你是苹果电脑操作系统，更简单，无需下载xshell，系统可以直接连接VPS。打开<strong>终端</strong>（Terminal），输入ssh root@ip 其中“ip”替换成你VPS的ip, 按回车键，然后复制粘贴密码，按回车键即可登录。粘贴密码时有可能不显示密码，但不影响， <a href="http://www.cnblogs.com/ghj1976/archive/2013/04/19/3030159.html">参考设置方法</a> 如果不能用MAC自带的终端连接的话，直接网上搜“MAC连接SSH的软件”，有很多，然后通过软件来连接vps服务器就行，具体操作方式参考windows xshell。</p>
<hr>
<p>部署教程：</p>
<p>下载xshell软件并安装后，打开软件</p>
<figure data-type="image" tabindex="10"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png" alt="img"></a></figure>
<p>选择文件，新建</p>
<figure data-type="image" tabindex="11"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png" alt="img"></a></figure>
<p>随便取个名字，然后把你的服务器ip填上</p>
<figure data-type="image" tabindex="12"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png" alt="img"></a></figure>
<p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名linux系统默认都是root，密码是购买服务器后的cent系统的密码。</p>
<p><strong>如果开好了服务器，发现xshell死活连不上，多半是开的服务器ip被墙了，遇到这种情况，把服务器删掉，重新开个新的服务器即可，可以是同地区的也可以选择其它地区。</strong></p>
<figure data-type="image" tabindex="13"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png" alt="img"></a></figure>
<figure data-type="image" tabindex="14"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/xshell2.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/xshell2.png" alt="img"></a></figure>
<p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。</p>
<p>CentOS6/Debian6/Ubuntu14 ShadowsocksR一键部署管理脚本：</p>
<hr>
<p>yum -y install wget</p>
<p>wget -N --no-check-certificate <a href="https://softs.fun/Bash/ssr.sh">https://softs.fun/Bash/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p>
<p>备用脚本：</p>
<p>yum -y install wget</p>
<p>wget -N --no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p>
<p>———————————————————代码分割线————————————————</p>
<p>复制上面的代码到VPS服务器里，按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh</p>
<figure data-type="image" tabindex="15"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png" alt="img"></a></figure>
<p>如上图出现管理界面后，<strong>输入数字1来安装SSR服务端</strong>。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p>
<figure data-type="image" tabindex="16"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/31.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/31.png" alt="img"></a></figure>
<p>根据上图提示，依次输入自己想设置的<strong>端口和密码</strong> (<strong>密码建议用复杂点的字母组合，端口号为1-65535之间的数字</strong>)，回车键用于确认</p>
<figure data-type="image" tabindex="17"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/32.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/32.png" alt="img"></a></figure>
<p>如上图，选择想设置的<strong>加密方式</strong>，比如10，按回车键确认</p>
<p>接下来是选择<strong>协议插件</strong>，如下图：</p>
<figure data-type="image" tabindex="18"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png" alt="img"></a></figure>
<figure data-type="image" tabindex="19"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/41.PNG"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/41.PNG" alt="img"></a></figure>
<p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y</p>
<p>之后进行混淆插件的设置。<br>
<strong>注意：有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</strong></p>
<figure data-type="image" tabindex="20"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/33.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/33.png" alt="img"></a></figure>
<p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p>
<figure data-type="image" tabindex="21"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png" alt="img"></a></figure>
<p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p>
<figure data-type="image" tabindex="22"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png" alt="img"></a></figure>
<p>耐心等待一会，出现下面的界面即部署完成：</p>
<figure data-type="image" tabindex="23"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png" alt="img"></a></figure>
<figure data-type="image" tabindex="24"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/34.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/34.png" alt="img"></a></figure>
<p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：</p>
<figure data-type="image" tabindex="25"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png" alt="img"></a></figure>
<figure data-type="image" tabindex="26"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png" alt="img"></a></figure>
<p><strong>脚本演示结束。</strong></p>
<p>此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p>
<hr>
<p><strong>第三步：一键加速VPS服务器</strong></p>
<p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p>
<p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p>
<p>【谷歌BBR加速教程】</p>
<p>yum -y install wget</p>
<p>wget --no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh">https://github.com/teddysun/across/raw/master/bbr.sh</a></p>
<p>chmod +x bbr.sh</p>
<p>./bbr.sh</p>
<p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p>
<p>演示开始，如图：</p>
<p>复制并粘贴代码后，按回车键确认</p>
<figure data-type="image" tabindex="27"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png" alt="img"></a></figure>
<p>如下图提示，按任意键继续部署</p>
<figure data-type="image" tabindex="28"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png" alt="img"></a></figure>
<figure data-type="image" tabindex="29"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png" alt="img"></a></figure>
<p>部署到上图这个位置的时候，等待3～6分钟</p>
<figure data-type="image" tabindex="30"><a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png" alt="img"></a></figure>
<p>最后输入y重启服务器，如果输入y提示command not found ，接着输入reboot来重启服务器，确保加速生效，bbr加速脚本是开机自动启动，装一次就可以了。</p>
<hr>
<p>购买vps服务器后，ip有了，通过部署，端口、密码、加密方式、协议和混淆也有了，最后将这些信息填入SSR客户端就可以翻墙啦。</p>
<p><strong>有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子</strong>：<br>
<a href="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/42.PNG"><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/42.PNG" alt="img"></a></p>
<p>在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。</p>
<p>启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择&quot;全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）</p>
<figure data-type="image" tabindex="31"><a href="https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png"><img src="https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png" alt="ssr9000"></a></figure>
<hr>
<p><strong>常见问题参考解决方法</strong>：</p>
<p>1、用了一段时间发现ssr账号用不了了</p>
<p>首先ping一下自己的ip，看看能不能ping的通，ping不通那么就是ip被墙了，ip被墙时，xshell也会连接不上服务器，遇到这种情况重新部署一个新的服务器，新的服务器就是新的ip。关于怎么ping ip的方法，可以自行网上搜索，或者用xshell软件连接服务器来判断，连不上即是被墙了。vultr开通和删除服务器非常方便，新服务器即新ip，大多数vps服务商都没有这样的服务，一般的vps服务商可能会提供免费更换1次ip的服务。</p>
<p>2、刚搭建好的ssr账号，ip能ping通，但是还是用不了</p>
<p>首选排除杀毒软件的干扰，尤其是国产杀毒软件，比如360安全卫生、360杀毒软件、腾讯管家、金山卫生等。这些东西很容易干扰翻墙上网，如果你的电脑安装了这样的东西，建议至少翻墙时别用，最好卸载。其次，检查下SSR信息是否填写正确。浏览器的代理方式是否是ssr代理，即（HTTP）127.0.0.1 和1080。如果以上条件都排除，还是用不了，那么可以更换端口、加密方式、协议、混淆，或者更换服务器位置。另外，如果你的vps服务器配置的是SSR账号，即有协议和混淆且没有兼容原版(SS版），那么你必须使用SSSR客户端来使用账号，因为SS客户端没有填写协议和混淆的选项。</p>
<p>3、有的地区需要把混淆参数设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。</p>
<p>4、电脑能用但手机用不了</p>
<p>如果你的手机用的是SS客户端，SS客户端没有填协议和混淆的地方，如果你部署的协议和混淆的时候没有选择兼容原版（SS版），因此手机是用不了的。这个时候你把协议弄成兼容原版、混淆也设置成兼容原版即可。或者直接将协议设置成origin，混淆设置成plain。</p>
<p>5、vps的服务器操作系统不要用的太高，太高可能会因为系统的防火墙问题导致搭建的SSR账号连不上，如果你用的centos系统，建议用centos6，不要用centos7。如果你前面不小心装了centos7系统，那么只能重装系统或者重新部署新的vps服务器。</p>
<p>6、vultr服务商提供的vps服务器是单向流量计算，有的vps服务商是双向流量计算，单向流量计算对于用户来说更实惠。因为我们是在vps服务器上部署SSR服务端后，再用SSR客户端翻墙，所以SSR服务端就相当于中转，比如我们看一个视频，必然会产生流量，假如消耗流量80M，那么VPS服务器会产生上传80M和下载80M流量，vultr服务商只计算单向的80M流量。如果是双向计算流量，那么会计算为160M流量。</p>
<p>7、如果你想把搭建的账号给多人使用，不用额外设置端口，因为一个账号就可以多人使用。一般10美元的服务器可以同时支持100人在线使用。</p>
<p>如果想实现支持每个用户(端口)不同的加密方式/协议/混淆等，并且管理流量使用，可以参考多用户配置脚本：wget -N --no-check-certificate <a href="https://softs.fun/Bash/ssrmu.sh">https://softs.fun/Bash/ssrmu.sh</a> &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh 备用脚本：wget -N --no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh</a> &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh 安装后管理命令为：bash ssrmu.sh<br>
注意：这个多用户配置脚本和教程内容的脚本无法共存！要想用这个脚本，把之前的脚本卸载，输入管理命令bash ssr.sh ，选择3，卸载ShadowsocksR即可卸载原脚本。</p>
<p>8、vultr服务器每月有流量限制，超过限制后服务器不会被停止运行，但是超出的流量会被额外收费。北美和西欧地区的服务器超出流量后，多出的部分收费为0.01美元/G。新加坡和日本东京（日本）为0.025美元/G，悉尼（澳大利亚）为0.05美元/G。把vultr服务器删掉，开通新的服务器，流量会从0开始重新计算。</p>
<p>9、vultr怎样才能申请退款呢？</p>
<p>vultr和其他的国外商家一样，都是使用工单的形式与客服联系，如果需要退款，直接在后台点击support，选择open ticket新开一个工单，选择billing question财务问题，简单的在文本框输入你的退款理由。比如：Please refund all the balance in my account。工单提交以后一般很快就可以给你确认退款，若干个工作日后就会退回你的支付方式。（全额退款结束后，账号可能会被删除）</p>
<p>如果英语水平不好，但是想和客服进行交流，可以用百度在线翻译，自动中文转英文和英文转中文。</p>
<p>10、路由器也可以配置ssr，关键的是路由器刷固件，华硕路由器刷梅林改版固件最简单，下载固件直接刷，梅林改版固件自带软件中心，然后再软件中心点离线安装就可以了（原版梅林不带软件中心 <a href="http://asuswrt.lostrealm.ca/download">下载</a>）。路由器刷merlin_8wan_firmware（八万）的固件就行<a href="http://firmware.koolshare.cn/">KoolShare固件下载</a><br>
其他的路由器也可以刷梅林。有问题或者对路由器配置ssr感兴趣的，可以在这些网站上自学：<a href="http://koolshare.cn/forum.php">koolshare</a> <a href="http://www.52asus.com/forum.php">华硕路由爱好者社区</a> <a href="https://nap6.com/portal.php">NAP6</a></p>
<hr>
<p>如果还有问题可以在这个帖子留言，或者自己网上搜索不明白的地方。多实践会更好。第一次部署时会慢一点，熟练了之后，就很快了。</p>
<p><a href="https://github.com/getlantern/forum/issues/5620">转接自：https://github.com/getlantern/forum/issues/5620</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[稍微整理了几个经常在H5移动端开发遇到的东西]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/shao-wei-zheng-li-liao-ji-ge-jing-chang-zai-h5-yi-dong-duan-kai-fa-yu-dao-de-dong-xi</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/shao-wei-zheng-li-liao-ji-ge-jing-chang-zai-h5-yi-dong-duan-kai-fa-yu-dao-de-dong-xi">
        </link>
        <updated>2019-10-16T09:19:59.000Z</updated>
        <summary type="html"><![CDATA[<p>不用说我也知道，此类文章太多太多了，常见的譬如：</p>
<p>viewport、强制浏览器全屏、IOS的Web APP模式、可点击元素出现阴影（这个我觉得真没必要去掉，用户点击是需要反馈的，而这个背景色刚刚好提供了一种反馈）等等，太多啦，这些相信大家百度一下就可以查到很多资料</p>
<p>本篇文章主要是讲一些其他的或者优化手段。内容不多</p>
]]></summary>
        <content type="html"><![CDATA[<p>不用说我也知道，此类文章太多太多了，常见的譬如：</p>
<p>viewport、强制浏览器全屏、IOS的Web APP模式、可点击元素出现阴影（这个我觉得真没必要去掉，用户点击是需要反馈的，而这个背景色刚刚好提供了一种反馈）等等，太多啦，这些相信大家百度一下就可以查到很多资料</p>
<p>本篇文章主要是讲一些其他的或者优化手段。内容不多</p>
<!-- more -->
<h3 id="弹出数字键盘">弹出数字键盘</h3>
<pre><code class="language-html">
&lt;!-- 有&quot;#&quot; &quot;*&quot;符号输入 --&gt;
&lt;input type=&quot;tel&quot;&gt;
&lt;!-- 纯数字 --&gt;
&lt;input pattern=&quot;\d*&quot;&gt;

</code></pre>
<p>安卓跟IOS的表现形式应该不一样，大家可以自己试试。当运用了正则pattern后，就不用关注input的类型了<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1571217719268.gif" alt=""><br>
​</p>
<h3 id="调用系统的某些功能">调用系统的某些功能</h3>
<pre><code class="language-html">
&lt;!-- 拨号 --&gt;
&lt;a href=&quot;tel:10086&quot;&gt;打电话给: 10086&lt;/a&gt;
&lt;!-- 发送短信 --&gt;
&lt;a href=&quot;sms:10086&quot;&gt;发短信给: 10086&lt;/a&gt;
&lt;!-- 发送邮件 --&gt;
&lt;a href=&quot;mailto:839626987@qq.com&quot;&gt;发邮件给：839626987@qq.com&lt;/a&gt;
&lt;!-- 选择照片或者拍摄照片 --&gt;
&lt;input type=&quot;file&quot; accept=&quot;image/*&quot;&gt;
&lt;!-- 选择视频或者拍摄视频 --&gt;
&lt;input type=&quot;file&quot; accept=&quot;video/*&quot;&gt;
&lt;!-- 多选 --&gt;
&lt;input type=&quot;file&quot; multiple&gt;

</code></pre>
<p>同上‍♂️<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1571217870768.gif" alt=""><br>
​</p>
<h3 id="打开原生应用">打开原生应用</h3>
<pre><code class="language-html">
&lt;a href=&quot;weixin://&quot;&gt;打开微信&lt;/a&gt;
&lt;a href=&quot;alipays://&quot;&gt;打开支付宝&lt;/a&gt;
&lt;a href=&quot;alipays://platformapi/startapp?saId=10000007&quot;&gt;打开支付宝的扫一扫功能&lt;/a&gt;
&lt;a href=&quot;alipays://platformapi/startapp?appId=60000002&quot;&gt;打开支付宝的蚂蚁森林&lt;/a&gt;

</code></pre>
<p>这种方式叫做URL Scheme，是一种协议，一般用来访问APP或者APP中的某个功能/页面（如唤醒APP后打开指定页面或者使用某些功能）</p>
<p>URL Scheme的基本格式如下：</p>
<p>scheme://[path][?query]<br>
scheme-应用标识<br>
path-行为(应用的某个功能/页面)<br>
query-功能需要的参数</p>
<p>一般是由APP开发者自己定义，比如规定一些参数或者路径让其他开发者来访问，就像上面的例子</p>
<p>注意事项：</p>
<ul>
<li>唤醒APP的条件是你的手机已经安装了该APP</li>
<li>某些浏览器会禁用此协议，比如微信内部浏览器（除非开了白名单）</li>
</ul>
<p>​<img src="http://lionney.coding.me/lionney.coding.net//post-images/1571218210599.gif" alt=""></p>
<p>后面应该会专门写一篇文章用来探讨唤醒APP</p>
<h3 id="解决active伪类失效">解决active伪类失效</h3>
<pre><code class="language-html">
&lt;body ontouchstart&gt;&lt;/body&gt;

</code></pre>
<p>给<code>body</code>注册一个空事件即可</p>
<h3 id="忽略自动识别">忽略自动识别</h3>
<pre><code class="language-html">
&lt;!-- 忽略浏览器自动识别数字为电话号码 --&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;
&lt;!-- 忽略浏览器自动识别邮箱账号 --&gt;
&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;&gt;

</code></pre>
<p>当页面上的内容包含了手机号/邮箱等，会自动转换成可点击的链接</p>
<p>比如你有如下代码：</p>
<pre><code class="language-html">
&lt;p&gt;13192733603&lt;/P&gt;

</code></pre>
<p>但是有些浏览器会识别为手机，并且可以点击拨号</p>
<h3 id="解决input失焦后页面没有回弹">解决input失焦后页面没有回弹</h3>
<p><img src="http://lionney.coding.me/lionney.coding.net//post-images/1571218337679.gif" alt=""><br>
​<br>
一般出现在IOS设备中的微信内部浏览器，出现的条件为：</p>
<ul>
<li>页面高度过小</li>
<li>聚焦时，页面需要往上移动的时候</li>
</ul>
<p>所以一般<code>input</code>在页面上方或者顶部都不会出现无法回弹</p>
<p>解决办法为，在聚焦时，获取当前滚动条高度，然后失焦时，赋值之前获取的高度：</p>
<pre><code class="language-html">
&lt;template&gt;
    &lt;input type=&quot;text&quot; @focus=&quot;focus&quot; @blur=&quot;blur&quot;&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
    data() {
        return {
            scrollTop: 0
        }
    },
 
    methods: {
        focus() {
            this.scrollTop = document.scrollingElement.scrollTop;
        },
 
        blur() {
            document.scrollingElement.scrollTo(0, this.scrollTop);
        }
    }
}
&lt;/script&gt;

</code></pre>
<h3 id="禁止长按">禁止长按</h3>
<p><img src="http://lionney.coding.me/lionney.coding.net//post-images/1571218468138.gif" alt=""><br>
​<br>
以上行为可以总结成这几个（每个手机以及浏览器的表现形式不一样）：长按图片保存、长按选择文字、长按链接/手机号/邮箱时呼出菜单。</p>
<p>想要禁止这些浏览器的默认行为，可以使用以下CSS：</p>
<pre><code class="language-css">
// 禁止长按图片保存
img {
    -webkit-touch-callout: none;
    pointer-events: none; // 像微信浏览器还是无法禁止，加上这行样式即可
}
// 禁止长按选择文字
div {
    -webkit-user-select: none;
}
// 禁止长按呼出菜单
div {
    -webkit-touch-callout: none;
}

</code></pre>
<h3 id="滑动不顺畅粘手">滑动不顺畅，粘手</h3>
<p>一般出现在IOS设备中，自定义盒子使用了<code>overflow: auto || scroll</code>后出现的情况。</p>
<p>优化代码：</p>
<pre><code class="language-css">
div {
    -webkit-overflow-scrolling: touch;
}

</code></pre>
<h3 id="屏幕旋转为横屏时字体大小会变">屏幕旋转为横屏时，字体大小会变</h3>
<p>具体出现的情况不明，有时候有有时候没有，欢迎指出。</p>
<p>优化代码：</p>
<pre><code class="language-css">
* {
    -webkit-text-size-adjust: 100%;
}

</code></pre>
<h3 id="最简单的rem自适应">最简单的rem自适应</h3>
<p>大家都知道，rem的值是根据根元素的字体大小相对计算的，但是我们每个设备的大小不一样，所以根元素的字体大小要动态设置</p>
<pre><code class="language-html">
html {
    font-size: calc(100vw / 3.75);
}
body {
    font-size: .14rem;
}

</code></pre>
<p>效果如下：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1571218644031.gif" alt=""><br>
​<br>
像我一般的话，直接搞lib-flexible、postcss-pxtorem就完事啦！</p>
<h3 id="滑动穿透">滑动穿透</h3>
<p>当你想在出现遮罩的时候，锁住用户的滚动行为，你可以这么做。</p>
<p>假设HTML结构如下：</p>
<pre><code class="language-html">
&lt;div class=&quot;mask&quot;&gt;
    &lt;div class=&quot;content&quot;&gt;我是弹框&lt;/div&gt;
&lt;/div&gt;

</code></pre>
<p>CSS样式如下：</p>
<pre><code class="language-css">
.mask {
    position: fixed;
    top: 0;
    left: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    background-color: rgba($color: #333, $alpha: .6);
        .content {
            padding: 20px;
            background-color: #fff;
            width: 300px;
        }
}

</code></pre>
<p>效果如下：<br>
<img src="http://lionney.coding.me/lionney.coding.net//post-images/1571218869210.gif" alt=""><br>
​<br>
可以看到，当在遮罩上滑动的时候，是会穿透到父节点的，最简单的办法就是阻住默认行为：</p>
<pre><code class="language-javascript">
document.querySelector(&quot;.mask&quot;).addEventListener(&quot;touchmove&quot;, event =&gt; {
    event.preventDefault();
});

</code></pre>
<p>如果在vue中，你可以这么写：</p>
<pre><code class="language-html">
&lt;div class=&quot;mask&quot; @touchumove.prevent&gt;&lt;/div&gt;

</code></pre>
<p>如果.content也有滚动条，那么只要阻止遮罩本身就行：</p>
<pre><code class="language-javascript">
document.querySelector(&quot;.mask&quot;).addEventListener(&quot;touchmove&quot;, event =&gt; {
    if (event.target.classList.contains(&quot;mask&quot;)) event.preventDefault();
});

</code></pre>
<p>或者：</p>
<pre><code class="language-html">
&lt;div class=&quot;mask&quot; @touchumove.self.prevent&gt;&lt;/div&gt;

</code></pre>
<p>这样，当出现遮罩的时候用户的滑动就会被锁住啦</p>
<h3 id="最后">最后</h3>
<p>像1px边框、唤醒APP后面会单独出文章，因为涉及的内容比较多。</p>
<p>文章是有点水，请轻喷‍♂️</p>
<p>如果你觉得这篇文章不错，请别忘记点个赞跟关注哦~</p>
<hr>
<p>作者：聪明的汤姆<br>
链接：<a href="https://juejin.im/post/5d6e1899e51d453b1e478b29">https://juejin.im/post/5d6e1899e51d453b1e478b29</a><br>
来源：掘金</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[他人即地狱]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/ta-ren-ji-di-yu</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/ta-ren-ji-di-yu">
        </link>
        <updated>2019-10-16T08:09:39.000Z</updated>
        <summary type="html"><![CDATA[<p>可以看别人的演绎，不过最好结合小说自己去理解。</p>
]]></summary>
        <content type="html"><![CDATA[<p>可以看别人的演绎，不过最好结合小说自己去理解。</p>
<!-- more -->
<p>以下是我的理解：在小说《禁闭》（Huis Clos, &quot;No Exit&quot;）之中，萨特描写四个人（的魂灵）坠入地狱，地狱中没有预想的酷刑，也没有火焰，只有一间封闭的密室，关着他们四个人。他们无论干什么都要在别人在场的情况之下进行，灯永远亮着，刀子杀不死人——因为反正都是魂灵。这样的痛苦就是地狱的痛苦，l'enfer, c'est les autres。此种情况下，他人的目光影响我的自由意志，左右我的选择，这令我痛苦，尤其是有时候在他人的影响之下做出违背心意的选择的时候。而我将别人视为“非我”、“他者”，“我”和“他们”的区别，界定什么是“自我”的范围。所以，如果没有他人，我就不会是现在这样的我，但是现在这样的我因为他人而存有丧失判断和自由选择能力的危险。</p>
<hr>
<p>作者：涛吴<br>
链接：<a href="https://www.zhihu.com/question/19622014/answer/12415055">https://www.zhihu.com/question/19622014/answer/12415055</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/hello-gridea</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不能让下一辈看到的感慨]]></title>
        <id>http://lionney.coding.me/lionney.coding.net//post/bu-neng-rang-xia-yi-bei-kan-dao-de-gan-gai</id>
        <link href="http://lionney.coding.me/lionney.coding.net//post/bu-neng-rang-xia-yi-bei-kan-dao-de-gan-gai">
        </link>
        <updated>1019-10-28T06:07:49.000Z</updated>
        <summary type="html"><![CDATA[<p>扎心不？<br>
西安交大，年愈七旬的交大女教授即兴发表了一番感慨：</p>
]]></summary>
        <content type="html"><![CDATA[<p>扎心不？<br>
西安交大，年愈七旬的交大女教授即兴发表了一番感慨：</p>
<!-- more -->
<p>我想几乎每个人都会有一个亲人群，我的亲人群叫【相亲相爱一家人】，有亲人转发了这样一篇文章：</p>
<blockquote></blockquote>
<p>《不能让下一辈看到的感慨》</p>
<p>已是几次住女儿家了。<br>
看到了孩子们的富足、前卫、潮流生活，很羡慕。<br>
但是，就是有那么点想不通：他们如此完美了，我们老人们为什么还要节衣缩食地&quot;接济&quot;人家？<br>
他们的化妆品有多少？随意买，经常买，刚打开又买，以至于一堆一堆地，过期了也不知道，而后扔掉，再扔掉……<br>
他们的衣服，自组织新家庭，就没有带来以前的旧衣服。全是新买的……<br>
他们的零食，五花八门，五湖四海。一袋袋、一瓶瓶、一盒盒、随意一款就是一袋白面与一桶麻油的钱。<br>
他们的冰箱里应有尽有，却经常去饭店。他们的工资，挣多少也是月光。<br>
他们给大人们的礼物，也就是那么一点点，一点点…………。<br>
我们，至今节俭，脑子里想的仍是——能省则省，不多花一分冤枉钱。买打折的、买低廉的、买一口口儿想吃的，攒下的大把的钱，然后悄无声息地，倾力补贴给儿孙们。</p>
<p>下一代用得着吗？<br>
下一代理解吗？<br>
下一代感恩吗？<br>
是存在代沟？<br>
还是时代不同？</p>
<p>也许我们这一代并不知道，当我们奉为稀罕的食物，给孩子们带去后，人家至今在那搁着、晾着，根本不屑一顾。一旦忘记了，很可能会毫不心痛地扔掉。<br>
我们给人家的是当地的商品，而人家却想的是外地的商品;  我们好不容易去外地给人家带了礼物，人家却又说喜欢国际的。<br>
于是在这个清晨，我看到孩子们随意丢在沙发上、灶台旁的各种巧克力呀、甜点呀、零食袋呀，脑子里就出现一大块猪肉、各种袋面、各种蔬菜水果……<br>
我们为什么不在有生之年，大方一把吃尽自己所想吃的地方小吃、特色餐饮……走出家门去享受大自然，趁着腿脚还灵便，有计划地到全国各地逛一逛，欣赏一下祖国的大好河山呢？<br>
孩子们的孩子出生了，我们为什么非得给人家带，这不是我们的责任，他（她）们整天吃喝玩乐，不理家业，沒了自己的责任和担当。 我们完全可以享受下自己的生活，不要等着他（她）们的养老，那是一场梦。<br>
我们有什么必要为他(她)们的不懂事而买单呢？您的钱款财物，还是留给落后时代的自己吧……！<br>
把自己的身体武装好，别太抠！年轻人去4S店维护一次车的费用都是论万的，你连自己这台老机器都舍不得维护值吗！<br>
赶快行动，从改变观念做起，全面改良自己的生活习惯。换一种活法，想方设法活出吾辈的精气神。不然就再没机会啦！</p>
<hr>
<p>我身边很多人都会说：买房肯定要用父母的钱啊！孩子肯定要让父母带啊，我哪有时间！孩子当然要吃好穿好啊，不能亏了孩子啊。</p>
<p>可能很多人都已经习惯了从父母身上刮油水，很多人很平淡的说，反正父母的钱早晚都是我们的。</p>
<p>说的没错，父母的钱早晚是孩子。但是，我听着却心寒。在父母活着的时候，作为孩子的你，为父母做过什么？有没有用尊重的口吻与父母对话？有没有关心过父母的身体？有没有了解过父母的所思所想？有没有在平时的生活中表达对父母的感恩之情？</p>
<p>没有，很少有，几乎没有。不知道从什么时候开始，孩子把父母的付出当做理所当然了。</p>
<p>这跟社会、环境没有关系，别不要脸的把罪恶都往社会和环境上推。社会是由人组成的，环境是由人造就的，说回来，人，就是根基。</p>
<p>现在的人都冷了，不冷活不下去。都自私了，不自私活不好。都无感情了，有感情活不长。</p>
<p>突然，想听摇滚了，那种呐喊可以让我的心舒服。</p>
<p>突然，想听电子音乐了，想去酒吧了，那种环境让我知道，我还是我，我也可以肆无忌惮。</p>
<p>长大你就懂了。我长大了，依旧不懂。总有人无意的对我说阳光一点，但是你总得告诉我阳光是什么。总有人告诉我要多一些正能量，这正能量在哪？我看到只在某些人的嘴里，但是他们所做所为，让我觉得恶心。</p>
<p>我喜欢韩寒，他说真话，实话，他把真话、实话说出来，让你自己去思考你自己的人生。从小到大我听过很多道理，依然过不好自己的人生。</p>
<p>千人千面，我不会读心术，我不知道你喜欢听什么不喜欢听什么，所以，我没那么高的情商。我喜欢给我当头棒喝的人，虽然我很生气，我很愤怒，但是我知道，你不会在背后捅我一刀。</p>
<p>我不喜欢情商高的人，他们太善于隐藏自己，我感到恐怖。</p>
<p>我赞同地球是人类监狱的说法，我们可能是外星人研究失败的试验品，又不忍心消灭，于是就把我们放在这个星球上，创造我们的生物在某个地方通过我们无法理解的方式在观察我们，研究我们，当我们学会了互爱互助真心分享，他们就会出现在我们的世界，把我们接到更美好的世界。但是，我们现在的所做所为，不值得他们现身。</p>
<p>崔健——《从头再来》</p>
]]></content>
    </entry>
</feed>